{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nfunction getApiKey(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"39f1d67cedf8b7831010a665328c9197\";\n    case \"arbitrum\":\n      return \"0550c209db33c3abf4cc927e1e18cea1\";\n    case \"bnb\":\n      return \"98b5a77e531614387366f6fc5da097f8\";\n    case \"matic\":\n      return \"cd9d4d70377471aa7c142ec4a4205249\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"ethereum-mainnet.core.chainstack.com\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.core.chainstack.com\";\n    case \"bnb\":\n      return \"bsc-mainnet.core.chainstack.com\";\n    case \"matic\":\n      return \"polygon-mainnet.core.chainstack.com\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nexport class ChainstackProvider extends JsonRpcProvider {\n  /**\n   *  Creates a new **ChainstackProvider**.\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = getApiKey(network.name);\n    }\n    const request = ChainstackProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    /**\n     *  The API key for the Chainstack connection.\n     */\n    _defineProperty(this, \"apiKey\", void 0);\n    defineProperties(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new ChainstackProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.apiKey === getApiKey(this._network.name);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%apiKey%% and %%projectSecret%%.\n   */\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = getApiKey(network.name);\n    }\n    const request = new FetchRequest(\"https://\".concat(getHost(network.name), \"/\").concat(apiKey));\n    request.allowGzip = true;\n    if (apiKey === getApiKey(network.name)) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"ChainstackProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\n//# sourceMappingURL=provider-chainstack.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}