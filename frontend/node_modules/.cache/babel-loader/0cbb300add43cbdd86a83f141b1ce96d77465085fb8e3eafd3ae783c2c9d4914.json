{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.gateway.pokt.network\";\n    case \"goerli\":\n      return \"eth-goerli.gateway.pokt.network\";\n    case \"matic\":\n      return \"poly-mainnet.gateway.pokt.network\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai-rpc.gateway.pokt.network\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider {\n  /**\n   *  Create a new **PocketProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  constructor(_network, applicationId, applicationSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    if (applicationSecret == null) {\n      applicationSecret = null;\n    }\n    const options = {\n      staticNetwork: network\n    };\n    const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n    super(request, network, options);\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    _defineProperty(this, \"applicationId\", void 0);\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    _defineProperty(this, \"applicationSecret\", void 0);\n    defineProperties(this, {\n      applicationId,\n      applicationSecret\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%% with\n   *  %%applicationId%%.\n   */\n  static getRequest(network, applicationId, applicationSecret) {\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    const request = new FetchRequest(\"https://\".concat(getHost(network.name), \"/v1/lb/\").concat(applicationId));\n    request.allowGzip = true;\n    if (applicationSecret) {\n      request.setCredentials(\"\", applicationSecret);\n    }\n    if (applicationId === defaultApplicationId) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"PocketProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n}\n//# sourceMappingURL=provider-pocket.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}