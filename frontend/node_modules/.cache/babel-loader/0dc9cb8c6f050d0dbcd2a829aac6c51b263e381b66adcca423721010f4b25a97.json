{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\fluent_GJ\\\\frontend\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ContactList from './ContactList';\nimport MessageList from './MessageList';\nimport MessageSender from './MessageSender';\nimport ErrorPanel, { useErrors } from './ErrorPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  contractManager,\n  walletManager,\n  currentUser,\n  onLogout\n}) => {\n  _s();\n  var _contractManager$getC;\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [contacts, setContacts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [messagesLoading, setMessagesLoading] = useState(false);\n  const [balance, setBalance] = useState('0');\n  const [lastMessageCount, setLastMessageCount] = useState(0);\n  const [pollInterval, setPollInterval] = useState(null);\n  const {\n    errors,\n    removeError,\n    addContractError,\n    addTransactionError,\n    addSuccess,\n    addNetworkError\n  } = useErrors();\n\n  // Load initial data\n  useEffect(() => {\n    if (contractManager && currentUser) {\n      loadContacts();\n      loadBalance();\n      setupEventListeners();\n    }\n    return () => {\n      if (contractManager) {\n        contractManager.removeMessageListeners();\n      }\n      // Clear polling interval\n      if (pollInterval) {\n        clearInterval(pollInterval);\n      }\n    };\n  }, [contractManager, currentUser]);\n\n  // Load conversation when contact is selected\n  useEffect(() => {\n    if (selectedContact && contractManager) {\n      loadConversation(selectedContact);\n      startMessagePolling(selectedContact);\n    } else {\n      setMessages([]);\n      stopMessagePolling();\n    }\n  }, [selectedContact, contractManager]);\n  const startMessagePolling = contact => {\n    // Clear existing interval\n    if (pollInterval) {\n      clearInterval(pollInterval);\n    }\n\n    // Start new polling every 3 seconds for better responsiveness\n    const interval = setInterval(async () => {\n      try {\n        if (contact && contractManager) {\n          const conversation = await contractManager.getConversation(contact);\n\n          // Only update if message count changed and we're still on the same contact\n          if (conversation.length !== lastMessageCount && selectedContact === contact) {\n            const sortedMessages = conversation.sort((a, b) => a.timestamp - b.timestamp);\n            setMessages(sortedMessages);\n            setLastMessageCount(conversation.length);\n\n            // Show notification if new messages received\n            if (conversation.length > lastMessageCount) {\n              const newMessagesCount = conversation.length - lastMessageCount;\n              console.log(`Polled ${newMessagesCount} new messages`);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error polling messages:', error);\n      }\n    }, 3000); // Poll every 3 seconds\n\n    setPollInterval(interval);\n  };\n  const stopMessagePolling = () => {\n    if (pollInterval) {\n      clearInterval(pollInterval);\n      setPollInterval(null);\n    }\n  };\n  const loadBalance = async () => {\n    try {\n      if (walletManager) {\n        const bal = await walletManager.getBalance();\n        setBalance(bal);\n      }\n    } catch (error) {\n      console.error('Error loading balance:', error);\n    }\n  };\n  const loadContacts = async () => {\n    try {\n      setIsLoading(true);\n      const contactsList = await contractManager.getContacts();\n      setContacts(contactsList);\n    } catch (error) {\n      console.error('Error loading contacts:', error);\n      addContractError('Failed to load contacts', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadConversation = async contactAddress => {\n    try {\n      setMessagesLoading(true);\n      const conversation = await contractManager.getConversation(contactAddress);\n\n      // Sort messages by timestamp\n      const sortedMessages = conversation.sort((a, b) => a.timestamp - b.timestamp);\n      setMessages(sortedMessages);\n      setLastMessageCount(sortedMessages.length);\n    } catch (error) {\n      console.error('Error loading conversation:', error);\n      addContractError('Failed to load conversation', error);\n      setMessages([]);\n      setLastMessageCount(0);\n    } finally {\n      setMessagesLoading(false);\n    }\n  };\n  const setupEventListeners = () => {\n    try {\n      // Listen for new messages from blockchain events\n      contractManager.listenForMessages(messageData => {\n        const {\n          sender,\n          receiver,\n          message,\n          timestamp\n        } = messageData;\n\n        // Check if this message is relevant to current user\n        if (sender === currentUser || receiver === currentUser) {\n          console.log('Received new message event:', messageData);\n          const newMessage = {\n            sender,\n            receiver,\n            message,\n            timestamp,\n            isRead: false\n          };\n\n          // Update messages if viewing the relevant conversation\n          const relevantContact = sender === currentUser ? receiver : sender;\n          if (selectedContact === relevantContact) {\n            setMessages(prev => {\n              // Avoid duplicate messages - check if message already exists\n              const exists = prev.some(msg => msg.sender === sender && msg.receiver === receiver && Math.abs(msg.timestamp - timestamp) < 10000 &&\n              // Within 10 seconds\n              msg.message === message);\n              if (!exists) {\n                const updated = [...prev, newMessage].sort((a, b) => a.timestamp - b.timestamp);\n                setLastMessageCount(updated.length);\n                return updated;\n              }\n              return prev;\n            });\n          }\n\n          // Update contacts list if new contact\n          const contactAddress = sender === currentUser ? receiver : sender;\n          if (!contacts.includes(contactAddress)) {\n            setContacts(prev => [...prev, contactAddress]);\n          }\n\n          // Show notification for received messages only (not sent messages)\n          if (sender !== currentUser) {\n            addSuccess(`Tin nhắn mới từ ${sender.slice(0, 6)}...${sender.slice(-4)}`, 'Tin nhắn mới');\n          }\n        }\n      });\n\n      // Listen for public key registrations (for contact updates)\n      contractManager.setupPublicKeyListener(keyData => {\n        console.log('New public key registered:', keyData);\n        loadContacts();\n      });\n    } catch (error) {\n      console.error('Error setting up event listeners:', error);\n      addNetworkError('Failed to set up real-time updates', error);\n    }\n  };\n  const handleSendMessage = async (receiver, messageText) => {\n    try {\n      if (!messageText.trim()) {\n        throw new Error('Tin nhắn không được để trống');\n      }\n      if (receiver === currentUser) {\n        throw new Error('Không thể gửi tin nhắn cho chính mình');\n      }\n\n      // Check if receiver has public key\n      const hasKey = await contractManager.hasPublicKey(receiver);\n      if (!hasKey) {\n        throw new Error('Người nhận chưa đăng ký public key');\n      }\n\n      // Check wallet balance\n      const currentBalance = parseFloat(await walletManager.getBalance());\n      if (currentBalance < 0.001) {\n        // Minimum balance check\n        throw new Error('Không đủ số dư để thanh toán phí giao dịch');\n      }\n      const result = await contractManager.sendMessage(receiver, messageText);\n\n      // Always add message immediately to UI for better UX\n      const newMessage = {\n        sender: currentUser,\n        receiver: receiver,\n        message: messageText,\n        timestamp: Date.now(),\n        isRead: false\n      };\n      setMessages(prev => {\n        const updated = [...prev, newMessage].sort((a, b) => a.timestamp - b.timestamp);\n        setLastMessageCount(updated.length);\n        return updated;\n      });\n\n      // Update contacts if not exists\n      if (!contacts.includes(receiver)) {\n        setContacts(prev => [...prev, receiver]);\n      }\n      addSuccess(`Tin nhắn đã gửi thành công!`, 'Gửi tin nhắn');\n      return result;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      addTransactionError(error.message || 'Không thể gửi tin nhắn', error);\n      throw error;\n    }\n  };\n  const handleSelectContact = contactAddress => {\n    setSelectedContact(contactAddress);\n  };\n  const handleAddContact = contactAddress => {\n    if (!contacts.includes(contactAddress)) {\n      setContacts(prev => [...prev, contactAddress]);\n      setSelectedContact(contactAddress);\n    }\n  };\n  const formatAddress = address => {\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n  const formatBalance = balance => {\n    const num = parseFloat(balance);\n    return num.toFixed(4);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room\",\n    children: [/*#__PURE__*/_jsxDEV(ErrorPanel, {\n      errors: errors,\n      onDismiss: removeError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-avatar\",\n              children: formatAddress(currentUser).slice(0, 2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-address\",\n                children: formatAddress(currentUser)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-balance\",\n                children: [\"\\uD83D\\uDCB0 \", formatBalance(balance), \" ETH\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-icon\",\n              onClick: loadBalance,\n              title: \"Refresh balance\",\n              children: \"\\uD83D\\uDD04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-icon logout-btn\",\n              onClick: onLogout,\n              title: \"Disconnect wallet\",\n              children: \"\\uD83D\\uDEAA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n          contacts: contacts,\n          selectedContact: selectedContact,\n          onSelectContact: handleSelectContact,\n          currentUser: currentUser,\n          contractManager: contractManager,\n          onAddContact: handleAddContact\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          currentUser: currentUser,\n          selectedContact: selectedContact,\n          isLoading: messagesLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageSender, {\n          onSendMessage: handleSendMessage,\n          selectedContact: selectedContact,\n          disabled: isLoading || !contractManager,\n          isLoading: messagesLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"network-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-indicator active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Fluent Testnet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Contract: \", (_contractManager$getC = contractManager.getContractAddress()) === null || _contractManager$getC === void 0 ? void 0 : _contractManager$getC.slice(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\uD83D\\uDCAC \", messages.length, \" messages\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\uD83D\\uDC65 \", contacts.length, \" contacts\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"N0cQjKmRLFT5fcBHsCrepC8KOLE=\", false, function () {\n  return [useErrors];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ContactList","MessageList","MessageSender","ErrorPanel","useErrors","jsxDEV","_jsxDEV","ChatRoom","contractManager","walletManager","currentUser","onLogout","_s","_contractManager$getC","selectedContact","setSelectedContact","messages","setMessages","contacts","setContacts","isLoading","setIsLoading","messagesLoading","setMessagesLoading","balance","setBalance","lastMessageCount","setLastMessageCount","pollInterval","setPollInterval","errors","removeError","addContractError","addTransactionError","addSuccess","addNetworkError","loadContacts","loadBalance","setupEventListeners","removeMessageListeners","clearInterval","loadConversation","startMessagePolling","stopMessagePolling","contact","interval","setInterval","conversation","getConversation","length","sortedMessages","sort","a","b","timestamp","newMessagesCount","console","log","error","bal","getBalance","contactsList","getContacts","contactAddress","listenForMessages","messageData","sender","receiver","message","newMessage","isRead","relevantContact","prev","exists","some","msg","Math","abs","updated","includes","slice","setupPublicKeyListener","keyData","handleSendMessage","messageText","trim","Error","hasKey","hasPublicKey","currentBalance","parseFloat","result","sendMessage","Date","now","handleSelectContact","handleAddContact","formatAddress","address","formatBalance","num","toFixed","className","children","onDismiss","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","onSelectContact","onAddContact","onSendMessage","disabled","getContractAddress","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/fluent_GJ/frontend/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport ContactList from './ContactList';\r\nimport MessageList from './MessageList';\r\nimport MessageSender from './MessageSender';\r\nimport ErrorPanel, { useErrors } from './ErrorPanel';\r\n\r\nconst ChatRoom = ({ \r\n  contractManager, \r\n  walletManager, \r\n  currentUser, \r\n  onLogout \r\n}) => {\r\n  const [selectedContact, setSelectedContact] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [messagesLoading, setMessagesLoading] = useState(false);\r\n  const [balance, setBalance] = useState('0');\r\n  const [lastMessageCount, setLastMessageCount] = useState(0);\r\n  const [pollInterval, setPollInterval] = useState(null);\r\n  \r\n  const { \r\n    errors, \r\n    removeError, \r\n    addContractError, \r\n    addTransactionError, \r\n    addSuccess,\r\n    addNetworkError \r\n  } = useErrors();\r\n\r\n  // Load initial data\r\n  useEffect(() => {\r\n    if (contractManager && currentUser) {\r\n      loadContacts();\r\n      loadBalance();\r\n      setupEventListeners();\r\n    }\r\n\r\n    return () => {\r\n      if (contractManager) {\r\n        contractManager.removeMessageListeners();\r\n      }\r\n      // Clear polling interval\r\n      if (pollInterval) {\r\n        clearInterval(pollInterval);\r\n      }\r\n    };\r\n  }, [contractManager, currentUser]);\r\n\r\n  // Load conversation when contact is selected\r\n  useEffect(() => {\r\n    if (selectedContact && contractManager) {\r\n      loadConversation(selectedContact);\r\n      startMessagePolling(selectedContact);\r\n    } else {\r\n      setMessages([]);\r\n      stopMessagePolling();\r\n    }\r\n  }, [selectedContact, contractManager]);\r\n\r\n  const startMessagePolling = (contact) => {\r\n    // Clear existing interval\r\n    if (pollInterval) {\r\n      clearInterval(pollInterval);\r\n    }\r\n\r\n    // Start new polling every 3 seconds for better responsiveness\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        if (contact && contractManager) {\r\n          const conversation = await contractManager.getConversation(contact);\r\n          \r\n          // Only update if message count changed and we're still on the same contact\r\n          if (conversation.length !== lastMessageCount && selectedContact === contact) {\r\n            const sortedMessages = conversation.sort((a, b) => a.timestamp - b.timestamp);\r\n            setMessages(sortedMessages);\r\n            setLastMessageCount(conversation.length);\r\n            \r\n            // Show notification if new messages received\r\n            if (conversation.length > lastMessageCount) {\r\n              const newMessagesCount = conversation.length - lastMessageCount;\r\n              console.log(`Polled ${newMessagesCount} new messages`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error polling messages:', error);\r\n      }\r\n    }, 3000); // Poll every 3 seconds\r\n\r\n    setPollInterval(interval);\r\n  };\r\n\r\n  const stopMessagePolling = () => {\r\n    if (pollInterval) {\r\n      clearInterval(pollInterval);\r\n      setPollInterval(null);\r\n    }\r\n  };\r\n\r\n  const loadBalance = async () => {\r\n    try {\r\n      if (walletManager) {\r\n        const bal = await walletManager.getBalance();\r\n        setBalance(bal);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading balance:', error);\r\n    }\r\n  };\r\n\r\n  const loadContacts = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const contactsList = await contractManager.getContacts();\r\n      setContacts(contactsList);\r\n    } catch (error) {\r\n      console.error('Error loading contacts:', error);\r\n      addContractError('Failed to load contacts', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadConversation = async (contactAddress) => {\r\n    try {\r\n      setMessagesLoading(true);\r\n      const conversation = await contractManager.getConversation(contactAddress);\r\n      \r\n      // Sort messages by timestamp\r\n      const sortedMessages = conversation.sort((a, b) => a.timestamp - b.timestamp);\r\n      setMessages(sortedMessages);\r\n      setLastMessageCount(sortedMessages.length);\r\n    } catch (error) {\r\n      console.error('Error loading conversation:', error);\r\n      addContractError('Failed to load conversation', error);\r\n      setMessages([]);\r\n      setLastMessageCount(0);\r\n    } finally {\r\n      setMessagesLoading(false);\r\n    }\r\n  };\r\n\r\n  const setupEventListeners = () => {\r\n    try {\r\n      // Listen for new messages from blockchain events\r\n      contractManager.listenForMessages((messageData) => {\r\n        const { sender, receiver, message, timestamp } = messageData;\r\n        \r\n        // Check if this message is relevant to current user\r\n        if (sender === currentUser || receiver === currentUser) {\r\n          console.log('Received new message event:', messageData);\r\n          \r\n          const newMessage = {\r\n            sender,\r\n            receiver,\r\n            message,\r\n            timestamp,\r\n            isRead: false\r\n          };\r\n\r\n          // Update messages if viewing the relevant conversation\r\n          const relevantContact = sender === currentUser ? receiver : sender;\r\n          \r\n          if (selectedContact === relevantContact) {\r\n            setMessages(prev => {\r\n              // Avoid duplicate messages - check if message already exists\r\n              const exists = prev.some(msg => \r\n                msg.sender === sender && \r\n                msg.receiver === receiver && \r\n                Math.abs(msg.timestamp - timestamp) < 10000 && // Within 10 seconds\r\n                msg.message === message\r\n              );\r\n              \r\n              if (!exists) {\r\n                const updated = [...prev, newMessage].sort((a, b) => a.timestamp - b.timestamp);\r\n                setLastMessageCount(updated.length);\r\n                return updated;\r\n              }\r\n              return prev;\r\n            });\r\n          }\r\n\r\n          // Update contacts list if new contact\r\n          const contactAddress = sender === currentUser ? receiver : sender;\r\n          if (!contacts.includes(contactAddress)) {\r\n            setContacts(prev => [...prev, contactAddress]);\r\n          }\r\n          \r\n          // Show notification for received messages only (not sent messages)\r\n          if (sender !== currentUser) {\r\n            addSuccess(`Tin nhắn mới từ ${sender.slice(0,6)}...${sender.slice(-4)}`, 'Tin nhắn mới');\r\n          }\r\n        }\r\n      });\r\n\r\n      // Listen for public key registrations (for contact updates)\r\n      contractManager.setupPublicKeyListener((keyData) => {\r\n        console.log('New public key registered:', keyData);\r\n        loadContacts();\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error setting up event listeners:', error);\r\n      addNetworkError('Failed to set up real-time updates', error);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (receiver, messageText) => {\r\n    try {\r\n      if (!messageText.trim()) {\r\n        throw new Error('Tin nhắn không được để trống');\r\n      }\r\n\r\n      if (receiver === currentUser) {\r\n        throw new Error('Không thể gửi tin nhắn cho chính mình');\r\n      }\r\n\r\n      // Check if receiver has public key\r\n      const hasKey = await contractManager.hasPublicKey(receiver);\r\n      if (!hasKey) {\r\n        throw new Error('Người nhận chưa đăng ký public key');\r\n      }\r\n\r\n      // Check wallet balance\r\n      const currentBalance = parseFloat(await walletManager.getBalance());\r\n      if (currentBalance < 0.001) { // Minimum balance check\r\n        throw new Error('Không đủ số dư để thanh toán phí giao dịch');\r\n      }\r\n\r\n      const result = await contractManager.sendMessage(receiver, messageText);\r\n      \r\n      // Always add message immediately to UI for better UX\r\n      const newMessage = {\r\n        sender: currentUser,\r\n        receiver: receiver,\r\n        message: messageText,\r\n        timestamp: Date.now(),\r\n        isRead: false\r\n      };\r\n      \r\n      setMessages(prev => {\r\n        const updated = [...prev, newMessage].sort((a, b) => a.timestamp - b.timestamp);\r\n        setLastMessageCount(updated.length);\r\n        return updated;\r\n      });\r\n      \r\n      // Update contacts if not exists\r\n      if (!contacts.includes(receiver)) {\r\n        setContacts(prev => [...prev, receiver]);\r\n      }\r\n      \r\n      addSuccess(`Tin nhắn đã gửi thành công!`, 'Gửi tin nhắn');\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      addTransactionError(error.message || 'Không thể gửi tin nhắn', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleSelectContact = (contactAddress) => {\r\n    setSelectedContact(contactAddress);\r\n  };\r\n\r\n  const handleAddContact = (contactAddress) => {\r\n    if (!contacts.includes(contactAddress)) {\r\n      setContacts(prev => [...prev, contactAddress]);\r\n      setSelectedContact(contactAddress);\r\n    }\r\n  };\r\n\r\n  const formatAddress = (address) => {\r\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n  };\r\n\r\n  const formatBalance = (balance) => {\r\n    const num = parseFloat(balance);\r\n    return num.toFixed(4);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-room\">\r\n      <ErrorPanel errors={errors} onDismiss={removeError} />\r\n      \r\n      <div className=\"chat-container\">\r\n        {/* Left Sidebar */}\r\n        <div className=\"chat-sidebar\">\r\n          <div className=\"sidebar-header\">\r\n            <div className=\"user-info\">\r\n              <div className=\"user-avatar\">\r\n                {formatAddress(currentUser).slice(0, 2)}\r\n              </div>\r\n              <div className=\"user-details\">\r\n                <div className=\"user-address\">\r\n                  {formatAddress(currentUser)}\r\n                </div>\r\n                <div className=\"user-balance\">\r\n                  💰 {formatBalance(balance)} ETH\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"sidebar-actions\">\r\n              <button \r\n                className=\"btn-icon\"\r\n                onClick={loadBalance}\r\n                title=\"Refresh balance\"\r\n              >\r\n                🔄\r\n              </button>\r\n              <button \r\n                className=\"btn-icon logout-btn\"\r\n                onClick={onLogout}\r\n                title=\"Disconnect wallet\"\r\n              >\r\n                🚪\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <ContactList\r\n            contacts={contacts}\r\n            selectedContact={selectedContact}\r\n            onSelectContact={handleSelectContact}\r\n            currentUser={currentUser}\r\n            contractManager={contractManager}\r\n            onAddContact={handleAddContact}\r\n          />\r\n        </div>\r\n\r\n        {/* Main Chat Area */}\r\n        <div className=\"chat-main\">\r\n          <MessageList\r\n            messages={messages}\r\n            currentUser={currentUser}\r\n            selectedContact={selectedContact}\r\n            isLoading={messagesLoading}\r\n          />\r\n          \r\n          <MessageSender\r\n            onSendMessage={handleSendMessage}\r\n            selectedContact={selectedContact}\r\n            disabled={isLoading || !contractManager}\r\n            isLoading={messagesLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Network Status Bar */}\r\n      <div className=\"network-status\">\r\n        <div className=\"status-item\">\r\n          <span className=\"status-indicator active\"></span>\r\n          <span>Fluent Testnet</span>\r\n        </div>\r\n        <div className=\"status-item\">\r\n          <span>Contract: {contractManager.getContractAddress()?.slice(0, 8)}...</span>\r\n        </div>\r\n        <div className=\"status-item\">\r\n          <span>💬 {messages.length} messages</span>\r\n        </div>\r\n        <div className=\"status-item\">\r\n          <span>👥 {contacts.length} contacts</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}