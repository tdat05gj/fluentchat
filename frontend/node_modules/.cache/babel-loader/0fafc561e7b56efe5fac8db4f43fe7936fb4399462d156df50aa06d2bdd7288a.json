{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { defineProperties, fromTwos, getBigInt, mask, toTwos } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, WordSize } from \"./abstract-coder.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nexport class NumberCoder extends Coder {\n  constructor(size, signed, localName) {\n    const name = (signed ? \"int\" : \"uint\") + size * 8;\n    super(name, name, localName, false);\n    _defineProperty(this, \"size\", void 0);\n    _defineProperty(this, \"signed\", void 0);\n    defineProperties(this, {\n      size,\n      signed\n    }, {\n      size: \"number\",\n      signed: \"boolean\"\n    });\n  }\n  defaultValue() {\n    return 0;\n  }\n  encode(writer, _value) {\n    let value = getBigInt(Typed.dereference(_value, this.type));\n    // Check bounds are safe for encoding\n    let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n    if (this.signed) {\n      let bounds = mask(maxUintValue, this.size * 8 - 1);\n      if (value > bounds || value < -(bounds + BN_1)) {\n        this._throwError(\"value out-of-bounds\", _value);\n      }\n      value = toTwos(value, 8 * WordSize);\n    } else if (value < BN_0 || value > mask(maxUintValue, this.size * 8)) {\n      this._throwError(\"value out-of-bounds\", _value);\n    }\n    return writer.writeValue(value);\n  }\n  decode(reader) {\n    let value = mask(reader.readValue(), this.size * 8);\n    if (this.signed) {\n      value = fromTwos(value, this.size * 8);\n    }\n    return value;\n  }\n}\n//# sourceMappingURL=number.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}