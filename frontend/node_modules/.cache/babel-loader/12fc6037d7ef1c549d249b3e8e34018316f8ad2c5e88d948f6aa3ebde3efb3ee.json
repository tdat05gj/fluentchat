{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';const MessageList=_ref=>{let{messages,currentUser,selectedContact,isLoading}=_ref;const messagesEndRef=useRef(null);const messagesContainerRef=useRef(null);const[wasNearBottom,setWasNearBottom]=useState(true);const[prevMessageCount,setPrevMessageCount]=useState(0);const[prevSelectedContact,setPrevSelectedContact]=useState(null);useEffect(()=>{// When contact changes, scroll to bottom of new conversation\nif(selectedContact!==prevSelectedContact){setPrevSelectedContact(selectedContact);setPrevMessageCount(messages.length);setWasNearBottom(true);// Reset to allow auto-scroll for new messages\n// Scroll to bottom of the new conversation\nif(selectedContact&&messages.length>0){setTimeout(()=>{scrollToBottom();},200);// Increased delay for better DOM readiness\n}else if(selectedContact){// Even for empty conversations, scroll to bottom area\nsetTimeout(()=>{scrollToBottom();},200);}return;}// Only scroll if we have more messages than before AND user was near bottom\nconst hasNewMessages=messages.length>prevMessageCount;if(hasNewMessages&&wasNearBottom){scrollToBottom();}setPrevMessageCount(messages.length);},[messages,selectedContact,wasNearBottom,prevMessageCount,prevSelectedContact]);const scrollToBottom=()=>{// Force scroll to bottom using multiple methods\nif(messagesEndRef.current){messagesEndRef.current.scrollIntoView({behavior:'smooth',block:'end'});}// Backup method using container scroll\nif(messagesContainerRef.current){const container=messagesContainerRef.current;setTimeout(()=>{container.scrollTop=container.scrollHeight;},50);}};const handleScroll=()=>{if(!messagesContainerRef.current)return;const{scrollTop,scrollHeight,clientHeight}=messagesContainerRef.current;const isNearBottom=scrollTop+clientHeight>=scrollHeight-100;setWasNearBottom(isNearBottom);};const formatTimestamp=timestamp=>{const date=new Date(timestamp);const now=new Date();const diffInHours=Math.abs(now-date)/36e5;if(diffInHours<1){return date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});}else if(diffInHours<24){return date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});}else if(diffInHours<168){// Within a week\nreturn date.toLocaleDateString([],{weekday:'short',hour:'2-digit',minute:'2-digit'});}else{return date.toLocaleDateString([],{month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'});}};const formatAddress=address=>{return\"\".concat(address.slice(0,6),\"...\").concat(address.slice(-4));};const groupMessagesByDate=messages=>{const groups={};messages.forEach(message=>{const date=new Date(message.timestamp);const dateKey=date.toDateString();if(!groups[dateKey]){groups[dateKey]=[];}groups[dateKey].push(message);});return groups;};const isToday=date=>{const today=new Date();return date.toDateString()===today.toDateString();};const isYesterday=date=>{const yesterday=new Date();yesterday.setDate(yesterday.getDate()-1);return date.toDateString()===yesterday.toDateString();};const formatDateHeader=dateString=>{const date=new Date(dateString);if(isToday(date)){return'Today';}else if(isYesterday(date)){return'Yesterday';}else{return date.toLocaleDateString([],{weekday:'long',year:'numeric',month:'long',day:'numeric'});}};if(isLoading){return/*#__PURE__*/React.createElement(\"div\",{className:\"message-list loading\"},/*#__PURE__*/React.createElement(\"div\",{className:\"loading-messages\"},/*#__PURE__*/React.createElement(\"div\",{className:\"spinner\"}),/*#__PURE__*/React.createElement(\"p\",null,\"Loading messages...\")));}if(!selectedContact){return/*#__PURE__*/React.createElement(\"div\",{className:\"message-list empty\"},/*#__PURE__*/React.createElement(\"div\",{className:\"no-conversation\"},/*#__PURE__*/React.createElement(\"div\",{className:\"no-conversation-icon\"},\"\\uD83D\\uDCAC\"),/*#__PURE__*/React.createElement(\"h3\",null,\"Welcome to Fluent Messaging\"),/*#__PURE__*/React.createElement(\"p\",null,\"Select a contact from the sidebar to start a conversation\"),/*#__PURE__*/React.createElement(\"div\",{className:\"features-list\"},/*#__PURE__*/React.createElement(\"div\",{className:\"feature\"},/*#__PURE__*/React.createElement(\"span\",{className:\"feature-icon\"},\"\\uD83D\\uDD12\"),/*#__PURE__*/React.createElement(\"span\",null,\"End-to-end encrypted on blockchain\")),/*#__PURE__*/React.createElement(\"div\",{className:\"feature\"},/*#__PURE__*/React.createElement(\"span\",{className:\"feature-icon\"},\"\\u26A1\"),/*#__PURE__*/React.createElement(\"span\",null,\"Real-time synchronization\")),/*#__PURE__*/React.createElement(\"div\",{className:\"feature\"},/*#__PURE__*/React.createElement(\"span\",{className:\"feature-icon\"},\"\\uD83C\\uDF10\"),/*#__PURE__*/React.createElement(\"span\",null,\"Decentralized on Fluent Network\")))));}if(!messages||messages.length===0){return/*#__PURE__*/React.createElement(\"div\",{className:\"message-list empty\"},/*#__PURE__*/React.createElement(\"div\",{className:\"no-messages\"},/*#__PURE__*/React.createElement(\"div\",{className:\"no-messages-icon\"},\"\\uD83D\\uDCDD\"),/*#__PURE__*/React.createElement(\"h4\",null,\"No messages yet\"),/*#__PURE__*/React.createElement(\"p\",null,\"Start the conversation with \",/*#__PURE__*/React.createElement(\"strong\",null,formatAddress(selectedContact))),/*#__PURE__*/React.createElement(\"small\",null,\"Messages are stored securely on the blockchain\")));}const messageGroups=groupMessagesByDate(messages);const sortedDates=Object.keys(messageGroups).sort((a,b)=>new Date(a)-new Date(b));return/*#__PURE__*/React.createElement(\"div\",{className:\"message-list\",ref:messagesContainerRef,onScroll:handleScroll},/*#__PURE__*/React.createElement(\"div\",{className:\"messages-container\"},sortedDates.map(dateString=>/*#__PURE__*/React.createElement(\"div\",{key:dateString,className:\"message-group\"},/*#__PURE__*/React.createElement(\"div\",{className:\"date-header\"},/*#__PURE__*/React.createElement(\"span\",{className:\"date-label\"},formatDateHeader(dateString))),messageGroups[dateString].map((message,index)=>{const isOwnMessage=message.sender.toLowerCase()===currentUser.toLowerCase();const prevMessage=index>0?messageGroups[dateString][index-1]:null;const showAvatar=!prevMessage||prevMessage.sender!==message.sender;return/*#__PURE__*/React.createElement(\"div\",{key:\"\".concat(message.timestamp,\"-\").concat(index),className:\"message \".concat(isOwnMessage?'sent':'received',\" \").concat(showAvatar?'show-avatar':'')},!isOwnMessage&&showAvatar&&/*#__PURE__*/React.createElement(\"div\",{className:\"message-avatar\"},/*#__PURE__*/React.createElement(\"div\",{className:\"avatar\"},formatAddress(message.sender).slice(0,2))),/*#__PURE__*/React.createElement(\"div\",{className:\"message-content\"},!isOwnMessage&&showAvatar&&/*#__PURE__*/React.createElement(\"div\",{className:\"message-sender\"},formatAddress(message.sender)),/*#__PURE__*/React.createElement(\"div\",{className:\"message-bubble\"},/*#__PURE__*/React.createElement(\"div\",{className:\"message-text\"},message.message||message.content),/*#__PURE__*/React.createElement(\"div\",{className:\"message-meta\"},/*#__PURE__*/React.createElement(\"span\",{className:\"message-time\"},formatTimestamp(message.timestamp)),isOwnMessage&&/*#__PURE__*/React.createElement(\"div\",{className:\"message-status\"},/*#__PURE__*/React.createElement(\"span\",{className:\"status-icon\",title:\"Sent on blockchain\"},\"\\u2713\"))))));}))),/*#__PURE__*/React.createElement(\"div\",{ref:messagesEndRef})),/*#__PURE__*/React.createElement(\"div\",{className:\"message-list-footer\"},/*#__PURE__*/React.createElement(\"small\",null,\"\\uD83D\\uDC8E Messages are stored on Fluent blockchain\")));};export default MessageList;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}