{"ast":null,"code":"import _classPrivateFieldInitSpec from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldSet from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _classPrivateFieldGet from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { defineProperties } from \"../utils/properties.js\";\nimport { assertArgument } from \"../utils/index.js\";\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n  /**\n   *  Creates a new **NetworkPlugin**.\n   */\n  constructor(name) {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    _defineProperty(this, \"name\", void 0);\n    defineProperties(this, {\n      name\n    });\n  }\n  /**\n   *  Creates a copy of this plugin.\n   */\n  clone() {\n    return new NetworkPlugin(this.name);\n  }\n}\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin {\n  /**\n   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n   *  latest block or another GasCostPlugin supercedes that block number,\n   *  with the associated %%costs%%.\n   */\n  constructor(effectiveBlock, costs) {\n    if (effectiveBlock == null) {\n      effectiveBlock = 0;\n    }\n    super(\"org.ethers.network.plugins.GasCost#\".concat(effectiveBlock || 0));\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    _defineProperty(this, \"effectiveBlock\", void 0);\n    /**\n     *  The transactions base fee.\n     */\n    _defineProperty(this, \"txBase\", void 0);\n    /**\n     *  The fee for creating a new account.\n     */\n    _defineProperty(this, \"txCreate\", void 0);\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    _defineProperty(this, \"txDataZero\", void 0);\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    _defineProperty(this, \"txDataNonzero\", void 0);\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    _defineProperty(this, \"txAccessListStorageKey\", void 0);\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    _defineProperty(this, \"txAccessListAddress\", void 0);\n    const props = {\n      effectiveBlock\n    };\n    function set(name, nullish) {\n      let value = (costs || {})[name];\n      if (value == null) {\n        value = nullish;\n      }\n      assertArgument(typeof value === \"number\", \"invalud value for \".concat(name), \"costs\", costs);\n      props[name] = value;\n    }\n    set(\"txBase\", 21000);\n    set(\"txCreate\", 32000);\n    set(\"txDataZero\", 4);\n    set(\"txDataNonzero\", 16);\n    set(\"txAccessListStorageKey\", 1900);\n    set(\"txAccessListAddress\", 2400);\n    defineProperties(this, props);\n  }\n  clone() {\n    return new GasCostPlugin(this.effectiveBlock, this);\n  }\n}\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n  /**\n   *  Creates a new **EnsPlugin** connected to %%address%% on the\n   *  %%targetNetwork%%. The default ENS address and mainnet is used\n   *  if unspecified.\n   */\n  constructor(address, targetNetwork) {\n    super(\"org.ethers.plugins.network.Ens\");\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    _defineProperty(this, \"address\", void 0);\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    _defineProperty(this, \"targetNetwork\", void 0);\n    defineProperties(this, {\n      address: address || EnsAddress,\n      targetNetwork: targetNetwork == null ? 1 : targetNetwork\n    });\n  }\n  clone() {\n    return new EnsPlugin(this.address, this.targetNetwork);\n  }\n}\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nvar _feeDataFunc = /*#__PURE__*/new WeakMap();\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n  /**\n   *  The fee data function provided to the constructor.\n   */\n  get feeDataFunc() {\n    return _classPrivateFieldGet(_feeDataFunc, this);\n  }\n  /**\n   *  Creates a new **FeeDataNetworkPlugin**.\n   */\n  constructor(feeDataFunc) {\n    super(\"org.ethers.plugins.network.FeeData\");\n    _classPrivateFieldInitSpec(this, _feeDataFunc, void 0);\n    _classPrivateFieldSet(_feeDataFunc, this, feeDataFunc);\n  }\n  /**\n   *  Resolves to the fee data.\n   */\n  async getFeeData(provider) {\n    return await _classPrivateFieldGet(_feeDataFunc, this).call(this, provider);\n  }\n  clone() {\n    return new FeeDataNetworkPlugin(_classPrivateFieldGet(_feeDataFunc, this));\n  }\n}\nvar _url = /*#__PURE__*/new WeakMap();\nvar _processFunc = /*#__PURE__*/new WeakMap();\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n  /**\n   *  The URL to initialize the FetchRequest with in %%processFunc%%.\n   */\n  get url() {\n    return _classPrivateFieldGet(_url, this);\n  }\n  /**\n   *  The callback to use when computing the FeeData.\n   */\n  get processFunc() {\n    return _classPrivateFieldGet(_processFunc, this);\n  }\n  /**\n   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n   *  be used when computing the fee data for the network.\n   */\n  constructor(url, processFunc) {\n    super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n    _classPrivateFieldInitSpec(this, _url, void 0);\n    _classPrivateFieldInitSpec(this, _processFunc, void 0);\n    _classPrivateFieldSet(_url, this, url);\n    _classPrivateFieldSet(_processFunc, this, processFunc);\n  }\n  // We are immutable, so we can serve as our own clone\n  clone() {\n    return this;\n  }\n}\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n//# sourceMappingURL=plugins-network.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}