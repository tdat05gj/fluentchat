{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Interface } from \"../abi/index.js\";\nimport { getCreateAddress } from \"../address/index.js\";\nimport { concat, defineProperties, getBytes, hexlify, assert, assertArgument } from \"../utils/index.js\";\nimport { BaseContract, copyOverrides, resolveArgs } from \"./contract.js\";\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */\nexport class ContractFactory {\n  /**\n   *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n   *  optionally connected to %%runner%%.\n   *\n   *  The %%bytecode%% may be the ``bytecode`` property within the\n   *  standard Solidity JSON output.\n   */\n  constructor(abi, bytecode, runner) {\n    /**\n     *  The Contract Interface.\n     */\n    _defineProperty(this, \"interface\", void 0);\n    /**\n     *  The Contract deployment bytecode. Often called the initcode.\n     */\n    _defineProperty(this, \"bytecode\", void 0);\n    /**\n     *  The ContractRunner to deploy the Contract as.\n     */\n    _defineProperty(this, \"runner\", void 0);\n    const iface = Interface.from(abi);\n    // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n    if (bytecode instanceof Uint8Array) {\n      bytecode = hexlify(getBytes(bytecode));\n    } else {\n      if (typeof bytecode === \"object\") {\n        bytecode = bytecode.object;\n      }\n      if (!bytecode.startsWith(\"0x\")) {\n        bytecode = \"0x\" + bytecode;\n      }\n      bytecode = hexlify(getBytes(bytecode));\n    }\n    defineProperties(this, {\n      bytecode,\n      interface: iface,\n      runner: runner || null\n    });\n  }\n  attach(target) {\n    return new BaseContract(target, this.interface, this.runner);\n  }\n  /**\n   *  Resolves to the transaction to deploy the contract, passing %%args%%\n   *  into the constructor.\n   */\n  async getDeployTransaction() {\n    let overrides = {};\n    const fragment = this.interface.deploy;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (fragment.inputs.length + 1 === args.length) {\n      overrides = await copyOverrides(args.pop());\n    }\n    if (fragment.inputs.length !== args.length) {\n      throw new Error(\"incorrect number of arguments to constructor\");\n    }\n    const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);\n    const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);\n    return Object.assign({}, overrides, {\n      data\n    });\n  }\n  /**\n   *  Resolves to the Contract deployed by passing %%args%% into the\n   *  constructor.\n   *\n   *  This will resolve to the Contract before it has been deployed to the\n   *  network, so the [[BaseContract-waitForDeployment]] should be used before\n   *  sending any transactions to it.\n   */\n  async deploy() {\n    const tx = await this.getDeployTransaction(...arguments);\n    assert(this.runner && typeof this.runner.sendTransaction === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const sentTx = await this.runner.sendTransaction(tx);\n    const address = getCreateAddress(sentTx);\n    return new BaseContract(address, this.interface, this.runner, sentTx);\n  }\n  /**\n   *  Return a new **ContractFactory** with the same ABI and bytecode,\n   *  but connected to %%runner%%.\n   */\n  connect(runner) {\n    return new ContractFactory(this.interface, this.bytecode, runner);\n  }\n  /**\n   *  Create a new **ContractFactory** from the standard Solidity JSON output.\n   */\n  static fromSolidity(output, runner) {\n    assertArgument(output != null, \"bad compiler output\", \"output\", output);\n    if (typeof output === \"string\") {\n      output = JSON.parse(output);\n    }\n    const abi = output.abi;\n    let bytecode = \"\";\n    if (output.bytecode) {\n      bytecode = output.bytecode;\n    } else if (output.evm && output.evm.bytecode) {\n      bytecode = output.evm.bytecode;\n    }\n    return new this(abi, bytecode, runner);\n  }\n}\n//# sourceMappingURL=factory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}