{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\fluent_GJ\\\\frontend\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ContactList from './ContactList';\nimport MessageList from './MessageList';\nimport MessageSender from './MessageSender';\nimport ErrorPanel, { useErrors } from './ErrorPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = ({\n  contractManager,\n  walletManager,\n  currentUser,\n  onLogout\n}) => {\n  _s();\n  var _contractManager$getC;\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [contacts, setContacts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [messagesLoading, setMessagesLoading] = useState(false);\n  const [balance, setBalance] = useState('0');\n  const {\n    errors,\n    removeError,\n    addContractError,\n    addTransactionError,\n    addSuccess,\n    addNetworkError\n  } = useErrors();\n\n  // Load initial data\n  useEffect(() => {\n    if (contractManager && currentUser) {\n      loadContacts();\n      loadBalance();\n      setupEventListeners();\n    }\n    return () => {\n      if (contractManager) {\n        contractManager.removeAllListeners();\n      }\n    };\n  }, [contractManager, currentUser]);\n\n  // Load conversation when contact is selected\n  useEffect(() => {\n    if (selectedContact && contractManager) {\n      loadConversation(selectedContact);\n    } else {\n      setMessages([]);\n    }\n  }, [selectedContact, contractManager]);\n  const loadBalance = async () => {\n    try {\n      if (walletManager) {\n        const bal = await walletManager.getBalance();\n        setBalance(bal);\n      }\n    } catch (error) {\n      console.error('Error loading balance:', error);\n    }\n  };\n  const loadContacts = async () => {\n    try {\n      setIsLoading(true);\n      const contactsList = await contractManager.getContacts();\n      setContacts(contactsList);\n    } catch (error) {\n      console.error('Error loading contacts:', error);\n      addContractError('Failed to load contacts', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadConversation = async contactAddress => {\n    try {\n      setMessagesLoading(true);\n      const conversation = await contractManager.getConversation(contactAddress);\n\n      // Sort messages by timestamp\n      const sortedMessages = conversation.sort((a, b) => a.timestamp - b.timestamp);\n      setMessages(sortedMessages);\n    } catch (error) {\n      console.error('Error loading conversation:', error);\n      addContractError('Failed to load conversation', error);\n      setMessages([]);\n    } finally {\n      setMessagesLoading(false);\n    }\n  };\n  const setupEventListeners = () => {\n    try {\n      // Listen for new messages\n      contractManager.setupMessageListener(messageData => {\n        const {\n          sender,\n          receiver,\n          content,\n          timestamp\n        } = messageData;\n\n        // Check if this message is relevant to current user\n        if (sender === currentUser || receiver === currentUser) {\n          const newMessage = {\n            sender,\n            receiver,\n            content,\n            timestamp,\n            isRead: false\n          };\n\n          // Update messages if viewing the relevant conversation\n          const relevantContact = sender === currentUser ? receiver : sender;\n          if (selectedContact === relevantContact) {\n            setMessages(prev => [...prev, newMessage]);\n          }\n\n          // Update contacts list\n          loadContacts();\n\n          // Show success notification for sent messages\n          if (sender === currentUser) {\n            addSuccess('Message sent successfully!');\n          }\n        }\n      });\n\n      // Listen for public key registrations (for contact updates)\n      contractManager.setupPublicKeyListener(keyData => {\n        console.log('New public key registered:', keyData);\n        loadContacts();\n      });\n    } catch (error) {\n      console.error('Error setting up event listeners:', error);\n      addNetworkError('Failed to set up real-time updates', error);\n    }\n  };\n  const handleSendMessage = async (receiver, messageText) => {\n    try {\n      if (!messageText.trim()) {\n        throw new Error('Message cannot be empty');\n      }\n      if (receiver === currentUser) {\n        throw new Error('Cannot send message to yourself');\n      }\n\n      // Check if receiver has public key\n      const hasKey = await contractManager.hasPublicKey(receiver);\n      if (!hasKey) {\n        throw new Error('Receiver has not registered a public key');\n      }\n\n      // Check wallet balance\n      const currentBalance = parseFloat(await walletManager.getBalance());\n      if (currentBalance < 0.001) {\n        // Minimum balance check\n        throw new Error('Insufficient balance for transaction fees');\n      }\n      const result = await contractManager.sendMessage(receiver, messageText);\n\n      // Don't manually add message here - let the event listener handle it\n      // This ensures consistency with blockchain state\n\n      return result;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      addTransactionError(error.message || 'Failed to send message', error);\n      throw error;\n    }\n  };\n  const handleSelectContact = contactAddress => {\n    setSelectedContact(contactAddress);\n  };\n  const handleAddContact = contactAddress => {\n    if (!contacts.includes(contactAddress)) {\n      setContacts(prev => [...prev, contactAddress]);\n      setSelectedContact(contactAddress);\n    }\n  };\n  const formatAddress = address => {\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n  const formatBalance = balance => {\n    const num = parseFloat(balance);\n    return num.toFixed(4);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room\",\n    children: [/*#__PURE__*/_jsxDEV(ErrorPanel, {\n      errors: errors,\n      onDismiss: removeError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-avatar\",\n              children: formatAddress(currentUser).slice(0, 2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-address\",\n                children: formatAddress(currentUser)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-balance\",\n                children: [\"\\uD83D\\uDCB0 \", formatBalance(balance), \" ETH\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-icon\",\n              onClick: loadBalance,\n              title: \"Refresh balance\",\n              children: \"\\uD83D\\uDD04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-icon logout-btn\",\n              onClick: onLogout,\n              title: \"Disconnect wallet\",\n              children: \"\\uD83D\\uDEAA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n          contacts: contacts,\n          selectedContact: selectedContact,\n          onSelectContact: handleSelectContact,\n          currentUser: currentUser,\n          contractManager: contractManager,\n          onAddContact: handleAddContact\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          currentUser: currentUser,\n          selectedContact: selectedContact,\n          isLoading: messagesLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageSender, {\n          onSendMessage: handleSendMessage,\n          selectedContact: selectedContact,\n          disabled: isLoading || !contractManager,\n          isLoading: messagesLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"network-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-indicator active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Fluent Testnet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Contract: \", (_contractManager$getC = contractManager.getContractAddress()) === null || _contractManager$getC === void 0 ? void 0 : _contractManager$getC.slice(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\uD83D\\uDCAC \", messages.length, \" messages\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-item\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\uD83D\\uDC65 \", contacts.length, \" contacts\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"MJPPuaBg7UaJ7rShy3/b/aSqjng=\", false, function () {\n  return [useErrors];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ContactList","MessageList","MessageSender","ErrorPanel","useErrors","jsxDEV","_jsxDEV","ChatRoom","contractManager","walletManager","currentUser","onLogout","_s","_contractManager$getC","selectedContact","setSelectedContact","messages","setMessages","contacts","setContacts","isLoading","setIsLoading","messagesLoading","setMessagesLoading","balance","setBalance","errors","removeError","addContractError","addTransactionError","addSuccess","addNetworkError","loadContacts","loadBalance","setupEventListeners","removeAllListeners","loadConversation","bal","getBalance","error","console","contactsList","getContacts","contactAddress","conversation","getConversation","sortedMessages","sort","a","b","timestamp","setupMessageListener","messageData","sender","receiver","content","newMessage","isRead","relevantContact","prev","setupPublicKeyListener","keyData","log","handleSendMessage","messageText","trim","Error","hasKey","hasPublicKey","currentBalance","parseFloat","result","sendMessage","message","handleSelectContact","handleAddContact","includes","formatAddress","address","slice","formatBalance","num","toFixed","className","children","onDismiss","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","onSelectContact","onAddContact","onSendMessage","disabled","getContractAddress","length","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/fluent_GJ/frontend/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport ContactList from './ContactList';\r\nimport MessageList from './MessageList';\r\nimport MessageSender from './MessageSender';\r\nimport ErrorPanel, { useErrors } from './ErrorPanel';\r\n\r\nconst ChatRoom = ({ \r\n  contractManager, \r\n  walletManager, \r\n  currentUser, \r\n  onLogout \r\n}) => {\r\n  const [selectedContact, setSelectedContact] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [messagesLoading, setMessagesLoading] = useState(false);\r\n  const [balance, setBalance] = useState('0');\r\n  \r\n  const { \r\n    errors, \r\n    removeError, \r\n    addContractError, \r\n    addTransactionError, \r\n    addSuccess,\r\n    addNetworkError \r\n  } = useErrors();\r\n\r\n  // Load initial data\r\n  useEffect(() => {\r\n    if (contractManager && currentUser) {\r\n      loadContacts();\r\n      loadBalance();\r\n      setupEventListeners();\r\n    }\r\n\r\n    return () => {\r\n      if (contractManager) {\r\n        contractManager.removeAllListeners();\r\n      }\r\n    };\r\n  }, [contractManager, currentUser]);\r\n\r\n  // Load conversation when contact is selected\r\n  useEffect(() => {\r\n    if (selectedContact && contractManager) {\r\n      loadConversation(selectedContact);\r\n    } else {\r\n      setMessages([]);\r\n    }\r\n  }, [selectedContact, contractManager]);\r\n\r\n  const loadBalance = async () => {\r\n    try {\r\n      if (walletManager) {\r\n        const bal = await walletManager.getBalance();\r\n        setBalance(bal);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading balance:', error);\r\n    }\r\n  };\r\n\r\n  const loadContacts = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const contactsList = await contractManager.getContacts();\r\n      setContacts(contactsList);\r\n    } catch (error) {\r\n      console.error('Error loading contacts:', error);\r\n      addContractError('Failed to load contacts', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadConversation = async (contactAddress) => {\r\n    try {\r\n      setMessagesLoading(true);\r\n      const conversation = await contractManager.getConversation(contactAddress);\r\n      \r\n      // Sort messages by timestamp\r\n      const sortedMessages = conversation.sort((a, b) => a.timestamp - b.timestamp);\r\n      setMessages(sortedMessages);\r\n    } catch (error) {\r\n      console.error('Error loading conversation:', error);\r\n      addContractError('Failed to load conversation', error);\r\n      setMessages([]);\r\n    } finally {\r\n      setMessagesLoading(false);\r\n    }\r\n  };\r\n\r\n  const setupEventListeners = () => {\r\n    try {\r\n      // Listen for new messages\r\n      contractManager.setupMessageListener((messageData) => {\r\n        const { sender, receiver, content, timestamp } = messageData;\r\n        \r\n        // Check if this message is relevant to current user\r\n        if (sender === currentUser || receiver === currentUser) {\r\n          const newMessage = {\r\n            sender,\r\n            receiver,\r\n            content,\r\n            timestamp,\r\n            isRead: false\r\n          };\r\n\r\n          // Update messages if viewing the relevant conversation\r\n          const relevantContact = sender === currentUser ? receiver : sender;\r\n          \r\n          if (selectedContact === relevantContact) {\r\n            setMessages(prev => [...prev, newMessage]);\r\n          }\r\n\r\n          // Update contacts list\r\n          loadContacts();\r\n          \r\n          // Show success notification for sent messages\r\n          if (sender === currentUser) {\r\n            addSuccess('Message sent successfully!');\r\n          }\r\n        }\r\n      });\r\n\r\n      // Listen for public key registrations (for contact updates)\r\n      contractManager.setupPublicKeyListener((keyData) => {\r\n        console.log('New public key registered:', keyData);\r\n        loadContacts();\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error setting up event listeners:', error);\r\n      addNetworkError('Failed to set up real-time updates', error);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (receiver, messageText) => {\r\n    try {\r\n      if (!messageText.trim()) {\r\n        throw new Error('Message cannot be empty');\r\n      }\r\n\r\n      if (receiver === currentUser) {\r\n        throw new Error('Cannot send message to yourself');\r\n      }\r\n\r\n      // Check if receiver has public key\r\n      const hasKey = await contractManager.hasPublicKey(receiver);\r\n      if (!hasKey) {\r\n        throw new Error('Receiver has not registered a public key');\r\n      }\r\n\r\n      // Check wallet balance\r\n      const currentBalance = parseFloat(await walletManager.getBalance());\r\n      if (currentBalance < 0.001) { // Minimum balance check\r\n        throw new Error('Insufficient balance for transaction fees');\r\n      }\r\n\r\n      const result = await contractManager.sendMessage(receiver, messageText);\r\n      \r\n      // Don't manually add message here - let the event listener handle it\r\n      // This ensures consistency with blockchain state\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      addTransactionError(error.message || 'Failed to send message', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleSelectContact = (contactAddress) => {\r\n    setSelectedContact(contactAddress);\r\n  };\r\n\r\n  const handleAddContact = (contactAddress) => {\r\n    if (!contacts.includes(contactAddress)) {\r\n      setContacts(prev => [...prev, contactAddress]);\r\n      setSelectedContact(contactAddress);\r\n    }\r\n  };\r\n\r\n  const formatAddress = (address) => {\r\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n  };\r\n\r\n  const formatBalance = (balance) => {\r\n    const num = parseFloat(balance);\r\n    return num.toFixed(4);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-room\">\r\n      <ErrorPanel errors={errors} onDismiss={removeError} />\r\n      \r\n      <div className=\"chat-container\">\r\n        {/* Left Sidebar */}\r\n        <div className=\"chat-sidebar\">\r\n          <div className=\"sidebar-header\">\r\n            <div className=\"user-info\">\r\n              <div className=\"user-avatar\">\r\n                {formatAddress(currentUser).slice(0, 2)}\r\n              </div>\r\n              <div className=\"user-details\">\r\n                <div className=\"user-address\">\r\n                  {formatAddress(currentUser)}\r\n                </div>\r\n                <div className=\"user-balance\">\r\n                  💰 {formatBalance(balance)} ETH\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"sidebar-actions\">\r\n              <button \r\n                className=\"btn-icon\"\r\n                onClick={loadBalance}\r\n                title=\"Refresh balance\"\r\n              >\r\n                🔄\r\n              </button>\r\n              <button \r\n                className=\"btn-icon logout-btn\"\r\n                onClick={onLogout}\r\n                title=\"Disconnect wallet\"\r\n              >\r\n                🚪\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <ContactList\r\n            contacts={contacts}\r\n            selectedContact={selectedContact}\r\n            onSelectContact={handleSelectContact}\r\n            currentUser={currentUser}\r\n            contractManager={contractManager}\r\n            onAddContact={handleAddContact}\r\n          />\r\n        </div>\r\n\r\n        {/* Main Chat Area */}\r\n        <div className=\"chat-main\">\r\n          <MessageList\r\n            messages={messages}\r\n            currentUser={currentUser}\r\n            selectedContact={selectedContact}\r\n            isLoading={messagesLoading}\r\n          />\r\n          \r\n          <MessageSender\r\n            onSendMessage={handleSendMessage}\r\n            selectedContact={selectedContact}\r\n            disabled={isLoading || !contractManager}\r\n            isLoading={messagesLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Network Status Bar */}\r\n      <div className=\"network-status\">\r\n        <div className=\"status-item\">\r\n          <span className=\"status-indicator active\"></span>\r\n          <span>Fluent Testnet</span>\r\n        </div>\r\n        <div className=\"status-item\">\r\n          <span>Contract: {contractManager.getContractAddress()?.slice(0, 8)}...</span>\r\n        </div>\r\n        <div className=\"status-item\">\r\n          <span>💬 {messages.length} messages</span>\r\n        </div>\r\n        <div className=\"status-item\">\r\n          <span>👥 {contacts.length} contacts</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}