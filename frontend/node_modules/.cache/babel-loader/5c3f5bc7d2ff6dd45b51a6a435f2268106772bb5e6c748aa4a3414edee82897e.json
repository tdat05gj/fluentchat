{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\fluent_GJ\\\\frontend\\\\src\\\\components\\\\ContactList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ContactList = ({\n  contacts,\n  selectedContact,\n  onSelectContact,\n  currentUser,\n  contractManager,\n  onAddContact\n}) => {\n  _s();\n  const [contactsWithLastMessage, setContactsWithLastMessage] = useState([]);\n  const [unreadCounts, setUnreadCounts] = useState({});\n  const [newContactAddress, setNewContactAddress] = useState('');\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (contacts && contacts.length > 0) {\n      loadContactsData();\n    }\n  }, [contacts, contractManager]);\n  const loadContactsData = async () => {\n    if (!contractManager || !contacts) return;\n    setIsLoading(true);\n    const contactsData = [];\n    for (const contact of contacts) {\n      try {\n        // Get last message\n        const lastMessage = await contractManager.getLastMessage(contact);\n\n        // Get unread count (this would need to be implemented based on your logic)\n        const unreadCount = await getUnreadCountForContact(contact);\n        contactsData.push({\n          address: contact,\n          lastMessage,\n          unreadCount,\n          avatar: generateAvatar(contact)\n        });\n      } catch (error) {\n        console.error(`Error loading data for contact ${contact}:`, error);\n        contactsData.push({\n          address: contact,\n          lastMessage: null,\n          unreadCount: 0,\n          avatar: generateAvatar(contact)\n        });\n      }\n    }\n    setContactsWithLastMessage(contactsData);\n    setIsLoading(false);\n  };\n  const getUnreadCountForContact = async contactAddress => {\n    // This is a simplified implementation\n    // In a real app, you'd need to track read/unread status per conversation\n    try {\n      return 0; // Placeholder - implement based on your message tracking logic\n    } catch (error) {\n      return 0;\n    }\n  };\n  const generateAvatar = address => {\n    // Generate a simple avatar based on address\n    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8'];\n    const index = parseInt(address.slice(-2), 16) % colors.length;\n    return {\n      backgroundColor: colors[index],\n      initials: address.slice(2, 4).toUpperCase()\n    };\n  };\n  const formatAddress = address => {\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n  const formatTimestamp = timestamp => {\n    if (!timestamp) return '';\n    const now = new Date();\n    const messageDate = new Date(timestamp);\n    const diffInHours = Math.abs(now - messageDate) / 36e5;\n    if (diffInHours < 1) {\n      return 'Just now';\n    } else if (diffInHours < 24) {\n      return messageDate.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } else {\n      return messageDate.toLocaleDateString();\n    }\n  };\n  const handleAddContact = async () => {\n    if (!newContactAddress.trim()) return;\n    const address = newContactAddress.trim();\n\n    // Basic address validation\n    if (!address.startsWith('0x') || address.length !== 42) {\n      alert('Please enter a valid Ethereum address');\n      return;\n    }\n    if (address.toLowerCase() === currentUser.toLowerCase()) {\n      alert('Cannot add yourself as a contact');\n      return;\n    }\n    try {\n      // Check if user has registered public key\n      const hasKey = await contractManager.hasPublicKey(address);\n      if (!hasKey) {\n        alert('This user has not registered a public key yet');\n        return;\n      }\n      onAddContact(address);\n      setNewContactAddress('');\n      setShowAddContact(false);\n    } catch (error) {\n      console.error('Error adding contact:', error);\n      alert('Failed to add contact: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contact-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCAC Conversations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-add-contact\",\n        onClick: () => setShowAddContact(!showAddContact),\n        title: \"Add new contact\",\n        children: showAddContact ? '✖️' : '➕'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), showAddContact && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-contact-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter wallet address (0x...)\",\n        value: newContactAddress,\n        onChange: e => setNewContactAddress(e.target.value),\n        className: \"add-contact-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddContact,\n        className: \"btn-add\",\n        disabled: !newContactAddress.trim(),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading contacts...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this) : contactsWithLastMessage.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-contacts\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-contacts-icon\",\n        children: \"\\uD83D\\uDC65\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"No conversations yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Add a contact to start messaging!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), !showAddContact && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: () => setShowAddContact(true),\n        children: \"Add First Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contacts\",\n      children: contactsWithLastMessage.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `contact-item ${selectedContact === contact.address ? 'active' : ''}`,\n        onClick: () => onSelectContact(contact.address),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-avatar\",\n          style: {\n            backgroundColor: contact.avatar.backgroundColor\n          },\n          children: contact.avatar.initials\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-name\",\n            children: formatAddress(contact.address)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-last-message\",\n            children: contact.lastMessage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `message-preview ${contact.lastMessage.sender === currentUser ? 'sent' : 'received'}`,\n                children: [contact.lastMessage.sender === currentUser ? 'You: ' : '', contact.lastMessage.content.length > 30 ? contact.lastMessage.content.substring(0, 30) + '...' : contact.lastMessage.content]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-timestamp\",\n                children: formatTimestamp(contact.lastMessage.timestamp)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"no-messages\",\n              children: \"No messages yet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this), contact.unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unread-badge\",\n          children: contact.unreadCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 17\n        }, this)]\n      }, contact.address, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactList, \"I6ncFzHEvZdJxqYRsF3pVKFGDpc=\");\n_c = ContactList;\nexport default ContactList;\nvar _c;\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ContactList","contacts","selectedContact","onSelectContact","currentUser","contractManager","onAddContact","_s","contactsWithLastMessage","setContactsWithLastMessage","unreadCounts","setUnreadCounts","newContactAddress","setNewContactAddress","showAddContact","setShowAddContact","isLoading","setIsLoading","length","loadContactsData","contactsData","contact","lastMessage","getLastMessage","unreadCount","getUnreadCountForContact","push","address","avatar","generateAvatar","error","console","contactAddress","colors","index","parseInt","slice","backgroundColor","initials","toUpperCase","formatAddress","formatTimestamp","timestamp","now","Date","messageDate","diffInHours","Math","abs","toLocaleTimeString","hour","minute","toLocaleDateString","handleAddContact","trim","startsWith","alert","toLowerCase","hasKey","hasPublicKey","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","type","placeholder","value","onChange","e","target","disabled","map","style","sender","content","substring","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/fluent_GJ/frontend/src/components/ContactList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ContactList = ({ \r\n  contacts, \r\n  selectedContact, \r\n  onSelectContact, \r\n  currentUser, \r\n  contractManager,\r\n  onAddContact \r\n}) => {\r\n  const [contactsWithLastMessage, setContactsWithLastMessage] = useState([]);\r\n  const [unreadCounts, setUnreadCounts] = useState({});\r\n  const [newContactAddress, setNewContactAddress] = useState('');\r\n  const [showAddContact, setShowAddContact] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (contacts && contacts.length > 0) {\r\n      loadContactsData();\r\n    }\r\n  }, [contacts, contractManager]);\r\n\r\n  const loadContactsData = async () => {\r\n    if (!contractManager || !contacts) return;\r\n\r\n    setIsLoading(true);\r\n    const contactsData = [];\r\n\r\n    for (const contact of contacts) {\r\n      try {\r\n        // Get last message\r\n        const lastMessage = await contractManager.getLastMessage(contact);\r\n        \r\n        // Get unread count (this would need to be implemented based on your logic)\r\n        const unreadCount = await getUnreadCountForContact(contact);\r\n\r\n        contactsData.push({\r\n          address: contact,\r\n          lastMessage,\r\n          unreadCount,\r\n          avatar: generateAvatar(contact)\r\n        });\r\n      } catch (error) {\r\n        console.error(`Error loading data for contact ${contact}:`, error);\r\n        contactsData.push({\r\n          address: contact,\r\n          lastMessage: null,\r\n          unreadCount: 0,\r\n          avatar: generateAvatar(contact)\r\n        });\r\n      }\r\n    }\r\n\r\n    setContactsWithLastMessage(contactsData);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const getUnreadCountForContact = async (contactAddress) => {\r\n    // This is a simplified implementation\r\n    // In a real app, you'd need to track read/unread status per conversation\r\n    try {\r\n      return 0; // Placeholder - implement based on your message tracking logic\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const generateAvatar = (address) => {\r\n    // Generate a simple avatar based on address\r\n    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8'];\r\n    const index = parseInt(address.slice(-2), 16) % colors.length;\r\n    return {\r\n      backgroundColor: colors[index],\r\n      initials: address.slice(2, 4).toUpperCase()\r\n    };\r\n  };\r\n\r\n  const formatAddress = (address) => {\r\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n  };\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    if (!timestamp) return '';\r\n    \r\n    const now = new Date();\r\n    const messageDate = new Date(timestamp);\r\n    const diffInHours = Math.abs(now - messageDate) / 36e5;\r\n\r\n    if (diffInHours < 1) {\r\n      return 'Just now';\r\n    } else if (diffInHours < 24) {\r\n      return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } else {\r\n      return messageDate.toLocaleDateString();\r\n    }\r\n  };\r\n\r\n  const handleAddContact = async () => {\r\n    if (!newContactAddress.trim()) return;\r\n\r\n    const address = newContactAddress.trim();\r\n    \r\n    // Basic address validation\r\n    if (!address.startsWith('0x') || address.length !== 42) {\r\n      alert('Please enter a valid Ethereum address');\r\n      return;\r\n    }\r\n\r\n    if (address.toLowerCase() === currentUser.toLowerCase()) {\r\n      alert('Cannot add yourself as a contact');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Check if user has registered public key\r\n      const hasKey = await contractManager.hasPublicKey(address);\r\n      if (!hasKey) {\r\n        alert('This user has not registered a public key yet');\r\n        return;\r\n      }\r\n\r\n      onAddContact(address);\r\n      setNewContactAddress('');\r\n      setShowAddContact(false);\r\n    } catch (error) {\r\n      console.error('Error adding contact:', error);\r\n      alert('Failed to add contact: ' + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"contact-list\">\r\n      <div className=\"contact-list-header\">\r\n        <h3>💬 Conversations</h3>\r\n        <button \r\n          className=\"btn-add-contact\"\r\n          onClick={() => setShowAddContact(!showAddContact)}\r\n          title=\"Add new contact\"\r\n        >\r\n          {showAddContact ? '✖️' : '➕'}\r\n        </button>\r\n      </div>\r\n\r\n      {showAddContact && (\r\n        <div className=\"add-contact-form\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter wallet address (0x...)\"\r\n            value={newContactAddress}\r\n            onChange={(e) => setNewContactAddress(e.target.value)}\r\n            className=\"add-contact-input\"\r\n          />\r\n          <button \r\n            onClick={handleAddContact}\r\n            className=\"btn-add\"\r\n            disabled={!newContactAddress.trim()}\r\n          >\r\n            Add\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isLoading ? (\r\n        <div className=\"contact-loading\">\r\n          <div className=\"spinner\"></div>\r\n          <p>Loading contacts...</p>\r\n        </div>\r\n      ) : contactsWithLastMessage.length === 0 ? (\r\n        <div className=\"no-contacts\">\r\n          <div className=\"no-contacts-icon\">👥</div>\r\n          <h4>No conversations yet</h4>\r\n          <p>Add a contact to start messaging!</p>\r\n          {!showAddContact && (\r\n            <button \r\n              className=\"btn-primary\"\r\n              onClick={() => setShowAddContact(true)}\r\n            >\r\n              Add First Contact\r\n            </button>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"contacts\">\r\n          {contactsWithLastMessage.map((contact) => (\r\n            <div\r\n              key={contact.address}\r\n              className={`contact-item ${selectedContact === contact.address ? 'active' : ''}`}\r\n              onClick={() => onSelectContact(contact.address)}\r\n            >\r\n              <div className=\"contact-avatar\" style={{ backgroundColor: contact.avatar.backgroundColor }}>\r\n                {contact.avatar.initials}\r\n              </div>\r\n              \r\n              <div className=\"contact-info\">\r\n                <div className=\"contact-name\">\r\n                  {formatAddress(contact.address)}\r\n                </div>\r\n                \r\n                <div className=\"contact-last-message\">\r\n                  {contact.lastMessage ? (\r\n                    <>\r\n                      <span className={`message-preview ${contact.lastMessage.sender === currentUser ? 'sent' : 'received'}`}>\r\n                        {contact.lastMessage.sender === currentUser ? 'You: ' : ''}\r\n                        {contact.lastMessage.content.length > 30 \r\n                          ? contact.lastMessage.content.substring(0, 30) + '...'\r\n                          : contact.lastMessage.content\r\n                        }\r\n                      </span>\r\n                      <span className=\"message-timestamp\">\r\n                        {formatTimestamp(contact.lastMessage.timestamp)}\r\n                      </span>\r\n                    </>\r\n                  ) : (\r\n                    <span className=\"no-messages\">No messages yet</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {contact.unreadCount > 0 && (\r\n                <div className=\"unread-badge\">\r\n                  {contact.unreadCount}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}