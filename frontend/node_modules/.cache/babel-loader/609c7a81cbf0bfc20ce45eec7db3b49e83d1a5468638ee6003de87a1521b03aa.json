{"ast":null,"code":"import { ethers } from 'ethers';\n\n// Official Fluent testnet configuration\nconst FLUENT_TESTNET_CONFIG = {\n  chainId: '0x51EA',\n  // 20994 in hex\n  chainName: 'Fluent Testnet',\n  nativeCurrency: {\n    name: 'ETH',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  rpcUrls: ['https://rpc.testnet.fluent.xyz'],\n  blockExplorerUrls: ['https://testnet.fluentscan.xyz/']\n};\nclass WalletManager {\n  constructor() {\n    this.provider = null;\n    this.signer = null;\n    this.account = null;\n    this.isConnected = false;\n    this.pendingRequests = new Set();\n  }\n  async checkMetaMask() {\n    // Check if ethereum object exists\n    if (typeof window === 'undefined') {\n      throw new Error('This application requires a browser environment.');\n    }\n\n    // Wait for MetaMask to inject properly\n    let attempts = 0;\n    while (attempts < 50) {\n      // Try for up to 5 seconds\n      if (window.ethereum && window.ethereum.isMetaMask) {\n        return true;\n      }\n      await new Promise(resolve => setTimeout(resolve, 100));\n      attempts++;\n    }\n\n    // Final check for any ethereum provider\n    if (window.ethereum) {\n      console.warn('Ethereum provider found but not confirmed as MetaMask');\n      return true;\n    }\n    throw new Error('MetaMask is required to use this dApp.');\n  }\n\n  // Check if already connected (for page refresh)\n  async checkExistingConnection() {\n    try {\n      if (!window.ethereum) return false;\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts'\n      });\n      if (accounts.length > 0) {\n        this.provider = new ethers.BrowserProvider(window.ethereum);\n        this.signer = await this.provider.getSigner();\n        this.account = accounts[0];\n        this.isConnected = true;\n        console.log('Existing wallet connection restored:', this.account);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error checking existing connection:', error);\n      return false;\n    }\n  }\n  async connectWallet() {\n    try {\n      await this.checkMetaMask();\n\n      // Safely access ethereum object with error handling\n      const ethereum = window.ethereum;\n      if (!ethereum) {\n        throw new Error('Ethereum provider not found');\n      }\n\n      // Prevent multiple simultaneous requests\n      if (this.pendingRequests.has('connect')) {\n        throw new Error('Connection request in progress, please wait...');\n      }\n      this.pendingRequests.add('connect');\n      try {\n        // Request account access\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        if (accounts.length === 0) {\n          throw new Error('Không tìm thấy tài khoản. Vui lòng kết nối ví.');\n        }\n        this.provider = new ethers.BrowserProvider(ethereum);\n        this.signer = await this.provider.getSigner();\n        this.account = accounts[0];\n        this.isConnected = true;\n\n        // Try to switch to Fluent testnet (non-blocking)\n        try {\n          await this.switchToFluentTestnet();\n        } catch (networkError) {\n          console.warn('Network switch failed, but continuing with connection:', networkError.message);\n          // Don't throw here - allow connection to proceed even if network switch fails\n        }\n      } finally {\n        this.pendingRequests.delete('connect');\n      }\n\n      // Listen for account changes (remove existing listeners first)\n      if (this.accountChangeListener) {\n        ethereum.removeListener('accountsChanged', this.accountChangeListener);\n      }\n      this.accountChangeListener = accounts => {\n        if (accounts.length === 0) {\n          this.disconnect();\n        } else {\n          this.account = accounts[0];\n          window.location.reload(); // Reload to refresh the app state\n        }\n      };\n      ethereum.on('accountsChanged', this.accountChangeListener);\n\n      // Listen for network changes (remove existing listeners first)\n      if (this.chainChangeListener) {\n        ethereum.removeListener('chainChanged', this.chainChangeListener);\n      }\n      this.chainChangeListener = chainId => {\n        console.log('Network changed to:', chainId);\n        window.location.reload(); // Reload to refresh the app state\n      };\n      ethereum.on('chainChanged', this.chainChangeListener);\n      return {\n        account: this.account,\n        provider: this.provider,\n        signer: this.signer\n      };\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      throw error;\n    }\n  }\n  async checkNetwork() {\n    try {\n      const ethereum = window.ethereum;\n      if (!ethereum) {\n        return {\n          isCorrect: false,\n          error: 'Ethereum provider not available'\n        };\n      }\n      const chainId = await ethereum.request({\n        method: 'eth_chainId'\n      });\n      const isFluentNetwork = chainId.toLowerCase() === '0x51ea';\n      if (!isFluentNetwork) {\n        console.warn('Not on Fluent testnet. Current chain ID:', chainId);\n        return {\n          isCorrect: false,\n          currentChainId: chainId,\n          expectedChainId: '0x51ea'\n        };\n      }\n      return {\n        isCorrect: true,\n        currentChainId: chainId,\n        expectedChainId: '0x51ea'\n      };\n    } catch (error) {\n      console.error('Error checking network:', error);\n      return {\n        isCorrect: false,\n        error: error.message\n      };\n    }\n  }\n  async switchToFluentTestnet() {\n    const requestKey = 'switchNetwork';\n\n    // Prevent duplicate requests\n    if (this.pendingRequests.has(requestKey)) {\n      console.log('Network switch already in progress, waiting...');\n      return;\n    }\n    try {\n      this.pendingRequests.add(requestKey);\n\n      // Safely get ethereum object\n      const ethereum = window.ethereum;\n      if (!ethereum) {\n        throw new Error('Ethereum provider not available');\n      }\n\n      // First check current network\n      const currentChainId = await ethereum.request({\n        method: 'eth_chainId'\n      });\n      console.log('Current chain ID:', currentChainId);\n\n      // If already on Fluent testnet, return\n      if (currentChainId.toLowerCase() === '0x51ea') {\n        console.log('Already on Fluent testnet');\n        return;\n      }\n\n      // Try to switch to existing network first\n      try {\n        await ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: FLUENT_TESTNET_CONFIG.chainId\n          }]\n        });\n        console.log('Successfully switched to Fluent testnet');\n        return;\n      } catch (switchError) {\n        console.log('Switch failed:', switchError.code, switchError.message);\n\n        // Only add network if it doesn't exist (error 4902)\n        if (switchError.code === 4902) {\n          console.log('Network not found, attempting to add...');\n          await ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [FLUENT_TESTNET_CONFIG]\n          });\n          console.log('Successfully added and switched to Fluent testnet');\n          return;\n        } else if (switchError.code === -32002) {\n          // Request already pending - just wait and return\n          console.log('Request already pending - continuing without network switch');\n          return;\n        } else {\n          throw switchError;\n        }\n      }\n    } catch (error) {\n      console.error('Failed to switch to Fluent testnet:', error);\n\n      // Handle different error cases\n      if (error.code === 4001) {\n        console.log('User rejected network switch');\n        throw new Error('Network switch was rejected. Please manually switch to Fluent Testnet in MetaMask.');\n      } else if (error.code === -32002) {\n        console.log('Request already pending - continuing');\n        return; // Don't throw error, just continue\n      } else {\n        // Don't throw error for network issues, just log and continue\n        console.warn('Network configuration needed, but continuing with wallet connection');\n        return; // Allow connection to proceed\n      }\n    } finally {\n      this.pendingRequests.delete(requestKey);\n    }\n  }\n  async checkNetwork() {\n    if (!this.provider) return false;\n    try {\n      const network = await this.provider.getNetwork();\n      const chainId = Number(network.chainId);\n      console.log('Current chain ID:', chainId);\n\n      // Accept multiple potential Fluent chain IDs\n      const validFluentIds = [20994, 84531, 421613];\n      const isValid = validFluentIds.includes(chainId);\n      console.log('Is valid Fluent network:', isValid);\n      return isValid;\n    } catch (error) {\n      console.error('Error checking network:', error);\n      return false;\n    }\n  }\n  async getBalance() {\n    if (!this.provider || !this.account) return '0';\n    try {\n      const balance = await this.provider.getBalance(this.account);\n      return ethers.formatEther(balance);\n    } catch (error) {\n      console.error('Error getting balance:', error);\n      return '0';\n    }\n  }\n  disconnect() {\n    // Clean up event listeners\n    if (window.ethereum) {\n      if (this.accountChangeListener) {\n        window.ethereum.removeListener('accountsChanged', this.accountChangeListener);\n        this.accountChangeListener = null;\n      }\n      if (this.chainChangeListener) {\n        window.ethereum.removeListener('chainChanged', this.chainChangeListener);\n        this.chainChangeListener = null;\n      }\n    }\n\n    // Reset state\n    this.provider = null;\n    this.signer = null;\n    this.account = null;\n    this.isConnected = false;\n    this.pendingRequests.clear();\n    console.log('Wallet disconnected');\n  }\n  formatAddress(address) {\n    if (!address) return '';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  }\n  async isConnectedAndOnCorrectNetwork() {\n    if (!this.isConnected || !this.provider) return false;\n    return await this.checkNetwork();\n  }\n}\nexport default new WalletManager();","map":{"version":3,"names":["ethers","FLUENT_TESTNET_CONFIG","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","WalletManager","constructor","provider","signer","account","isConnected","pendingRequests","Set","checkMetaMask","window","Error","attempts","ethereum","isMetaMask","Promise","resolve","setTimeout","console","warn","checkExistingConnection","accounts","request","method","length","BrowserProvider","getSigner","log","error","connectWallet","has","add","switchToFluentTestnet","networkError","message","delete","accountChangeListener","removeListener","disconnect","location","reload","on","chainChangeListener","checkNetwork","isCorrect","isFluentNetwork","toLowerCase","currentChainId","expectedChainId","requestKey","params","switchError","code","network","getNetwork","Number","validFluentIds","isValid","includes","getBalance","balance","formatEther","clear","formatAddress","address","slice","isConnectedAndOnCorrectNetwork"],"sources":["C:/Users/Admin/Desktop/fluent_GJ/frontend/src/utils/wallet.js"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\n// Official Fluent testnet configuration\r\nconst FLUENT_TESTNET_CONFIG = {\r\n  chainId: '0x51EA', // 20994 in hex\r\n  chainName: 'Fluent Testnet',\r\n  nativeCurrency: {\r\n    name: 'ETH',\r\n    symbol: 'ETH',\r\n    decimals: 18,\r\n  },\r\n  rpcUrls: ['https://rpc.testnet.fluent.xyz'],\r\n  blockExplorerUrls: ['https://testnet.fluentscan.xyz/'],\r\n};\r\n\r\nclass WalletManager {\r\n  constructor() {\r\n    this.provider = null;\r\n    this.signer = null;\r\n    this.account = null;\r\n    this.isConnected = false;\r\n    this.pendingRequests = new Set();\r\n  }\r\n\r\n  async checkMetaMask() {\r\n    // Check if ethereum object exists\r\n    if (typeof window === 'undefined') {\r\n      throw new Error('This application requires a browser environment.');\r\n    }\r\n\r\n    // Wait for MetaMask to inject properly\r\n    let attempts = 0;\r\n    while (attempts < 50) { // Try for up to 5 seconds\r\n      if (window.ethereum && window.ethereum.isMetaMask) {\r\n        return true;\r\n      }\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n      attempts++;\r\n    }\r\n\r\n    // Final check for any ethereum provider\r\n    if (window.ethereum) {\r\n      console.warn('Ethereum provider found but not confirmed as MetaMask');\r\n      return true;\r\n    }\r\n\r\n    throw new Error('MetaMask is required to use this dApp.');\r\n  }\r\n\r\n  // Check if already connected (for page refresh)\r\n  async checkExistingConnection() {\r\n    try {\r\n      if (!window.ethereum) return false;\r\n      \r\n      const accounts = await window.ethereum.request({ method: 'eth_accounts' });\r\n      if (accounts.length > 0) {\r\n        this.provider = new ethers.BrowserProvider(window.ethereum);\r\n        this.signer = await this.provider.getSigner();\r\n        this.account = accounts[0];\r\n        this.isConnected = true;\r\n        \r\n        console.log('Existing wallet connection restored:', this.account);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error checking existing connection:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async connectWallet() {\r\n    try {\r\n      await this.checkMetaMask();\r\n\r\n      // Safely access ethereum object with error handling\r\n      const ethereum = window.ethereum;\r\n      if (!ethereum) {\r\n        throw new Error('Ethereum provider not found');\r\n      }\r\n\r\n      // Prevent multiple simultaneous requests\r\n      if (this.pendingRequests.has('connect')) {\r\n        throw new Error('Connection request in progress, please wait...');\r\n      }\r\n\r\n      this.pendingRequests.add('connect');\r\n\r\n      try {\r\n        // Request account access\r\n        const accounts = await ethereum.request({\r\n          method: 'eth_requestAccounts',\r\n        });\r\n\r\n        if (accounts.length === 0) {\r\n          throw new Error('Không tìm thấy tài khoản. Vui lòng kết nối ví.');\r\n        }\r\n\r\n        this.provider = new ethers.BrowserProvider(ethereum);\r\n        this.signer = await this.provider.getSigner();\r\n        this.account = accounts[0];\r\n        this.isConnected = true;\r\n\r\n        // Try to switch to Fluent testnet (non-blocking)\r\n        try {\r\n          await this.switchToFluentTestnet();\r\n        } catch (networkError) {\r\n          console.warn('Network switch failed, but continuing with connection:', networkError.message);\r\n          // Don't throw here - allow connection to proceed even if network switch fails\r\n        }\r\n      } finally {\r\n        this.pendingRequests.delete('connect');\r\n      }\r\n\r\n      // Listen for account changes (remove existing listeners first)\r\n      if (this.accountChangeListener) {\r\n        ethereum.removeListener('accountsChanged', this.accountChangeListener);\r\n      }\r\n      \r\n      this.accountChangeListener = (accounts) => {\r\n        if (accounts.length === 0) {\r\n          this.disconnect();\r\n        } else {\r\n          this.account = accounts[0];\r\n          window.location.reload(); // Reload to refresh the app state\r\n        }\r\n      };\r\n      \r\n      ethereum.on('accountsChanged', this.accountChangeListener);\r\n\r\n      // Listen for network changes (remove existing listeners first)\r\n      if (this.chainChangeListener) {\r\n        ethereum.removeListener('chainChanged', this.chainChangeListener);\r\n      }\r\n      \r\n      this.chainChangeListener = (chainId) => {\r\n        console.log('Network changed to:', chainId);\r\n        window.location.reload(); // Reload to refresh the app state\r\n      };\r\n      \r\n      ethereum.on('chainChanged', this.chainChangeListener);\r\n\r\n      return {\r\n        account: this.account,\r\n        provider: this.provider,\r\n        signer: this.signer,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error connecting wallet:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async checkNetwork() {\r\n    try {\r\n      const ethereum = window.ethereum;\r\n      if (!ethereum) {\r\n        return {\r\n          isCorrect: false,\r\n          error: 'Ethereum provider not available'\r\n        };\r\n      }\r\n\r\n      const chainId = await ethereum.request({ method: 'eth_chainId' });\r\n      const isFluentNetwork = chainId.toLowerCase() === '0x51ea';\r\n      \r\n      if (!isFluentNetwork) {\r\n        console.warn('Not on Fluent testnet. Current chain ID:', chainId);\r\n        return {\r\n          isCorrect: false,\r\n          currentChainId: chainId,\r\n          expectedChainId: '0x51ea'\r\n        };\r\n      }\r\n      \r\n      return {\r\n        isCorrect: true,\r\n        currentChainId: chainId,\r\n        expectedChainId: '0x51ea'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error checking network:', error);\r\n      return {\r\n        isCorrect: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  async switchToFluentTestnet() {\r\n    const requestKey = 'switchNetwork';\r\n    \r\n    // Prevent duplicate requests\r\n    if (this.pendingRequests.has(requestKey)) {\r\n      console.log('Network switch already in progress, waiting...');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.pendingRequests.add(requestKey);\r\n      \r\n      // Safely get ethereum object\r\n      const ethereum = window.ethereum;\r\n      if (!ethereum) {\r\n        throw new Error('Ethereum provider not available');\r\n      }\r\n      \r\n      // First check current network\r\n      const currentChainId = await ethereum.request({ method: 'eth_chainId' });\r\n      console.log('Current chain ID:', currentChainId);\r\n      \r\n      // If already on Fluent testnet, return\r\n      if (currentChainId.toLowerCase() === '0x51ea') {\r\n        console.log('Already on Fluent testnet');\r\n        return;\r\n      }\r\n\r\n      // Try to switch to existing network first\r\n      try {\r\n        await ethereum.request({\r\n          method: 'wallet_switchEthereumChain',\r\n          params: [{ chainId: FLUENT_TESTNET_CONFIG.chainId }],\r\n        });\r\n        console.log('Successfully switched to Fluent testnet');\r\n        return;\r\n      } catch (switchError) {\r\n        console.log('Switch failed:', switchError.code, switchError.message);\r\n        \r\n        // Only add network if it doesn't exist (error 4902)\r\n        if (switchError.code === 4902) {\r\n          console.log('Network not found, attempting to add...');\r\n          await ethereum.request({\r\n            method: 'wallet_addEthereumChain',\r\n            params: [FLUENT_TESTNET_CONFIG],\r\n          });\r\n          console.log('Successfully added and switched to Fluent testnet');\r\n          return;\r\n        } else if (switchError.code === -32002) {\r\n          // Request already pending - just wait and return\r\n          console.log('Request already pending - continuing without network switch');\r\n          return;\r\n        } else {\r\n          throw switchError;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to switch to Fluent testnet:', error);\r\n      \r\n      // Handle different error cases\r\n      if (error.code === 4001) {\r\n        console.log('User rejected network switch');\r\n        throw new Error('Network switch was rejected. Please manually switch to Fluent Testnet in MetaMask.');\r\n      } else if (error.code === -32002) {\r\n        console.log('Request already pending - continuing');\r\n        return; // Don't throw error, just continue\r\n      } else {\r\n        // Don't throw error for network issues, just log and continue\r\n        console.warn('Network configuration needed, but continuing with wallet connection');\r\n        return; // Allow connection to proceed\r\n      }\r\n    } finally {\r\n      this.pendingRequests.delete(requestKey);\r\n    }\r\n  }\r\n\r\n  async checkNetwork() {\r\n    if (!this.provider) return false;\r\n\r\n    try {\r\n      const network = await this.provider.getNetwork();\r\n      const chainId = Number(network.chainId);\r\n      console.log('Current chain ID:', chainId);\r\n      \r\n      // Accept multiple potential Fluent chain IDs\r\n      const validFluentIds = [20994, 84531, 421613];\r\n      const isValid = validFluentIds.includes(chainId);\r\n      console.log('Is valid Fluent network:', isValid);\r\n      \r\n      return isValid;\r\n    } catch (error) {\r\n      console.error('Error checking network:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getBalance() {\r\n    if (!this.provider || !this.account) return '0';\r\n\r\n    try {\r\n      const balance = await this.provider.getBalance(this.account);\r\n      return ethers.formatEther(balance);\r\n    } catch (error) {\r\n      console.error('Error getting balance:', error);\r\n      return '0';\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    // Clean up event listeners\r\n    if (window.ethereum) {\r\n      if (this.accountChangeListener) {\r\n        window.ethereum.removeListener('accountsChanged', this.accountChangeListener);\r\n        this.accountChangeListener = null;\r\n      }\r\n      if (this.chainChangeListener) {\r\n        window.ethereum.removeListener('chainChanged', this.chainChangeListener);\r\n        this.chainChangeListener = null;\r\n      }\r\n    }\r\n\r\n    // Reset state\r\n    this.provider = null;\r\n    this.signer = null;\r\n    this.account = null;\r\n    this.isConnected = false;\r\n    this.pendingRequests.clear();\r\n    \r\n    console.log('Wallet disconnected');\r\n  }\r\n\r\n  formatAddress(address) {\r\n    if (!address) return '';\r\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n  }\r\n\r\n  async isConnectedAndOnCorrectNetwork() {\r\n    if (!this.isConnected || !this.provider) return false;\r\n    return await this.checkNetwork();\r\n  }\r\n}\r\n\r\nexport default new WalletManager();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}