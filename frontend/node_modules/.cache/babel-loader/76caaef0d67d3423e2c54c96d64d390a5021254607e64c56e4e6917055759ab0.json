{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';// Components\nimport KeyRegistration from'./components/KeyRegistration';import ChatRoom from'./components/ChatRoom';import ErrorPanel,{useErrors}from'./components/ErrorPanel';// Utils\nimport walletManager from'./utils/wallet';import contractManager from'./utils/contract';function App(){var _contractManager$getC;const[isConnected,setIsConnected]=useState(false);const[currentUser,setCurrentUser]=useState(null);const[hasPublicKey,setHasPublicKey]=useState(false);const[isLoading,setIsLoading]=useState(false);const[showRegistration,setShowRegistration]=useState(false);const[contract,setContract]=useState(null);const{errors,removeError,addWalletError,addNetworkError,addContractError,addSuccess,addInfo}=useErrors();useEffect(()=>{checkConnection();},[]);useEffect(()=>{if(isConnected&&currentUser&&contract){checkPublicKeyRegistration();}},[isConnected,currentUser,contract]);// Auto-clear wallet errors when connected\nuseEffect(()=>{if(isConnected){// Clear wallet errors after successful connection\nsetTimeout(()=>{errors.forEach(error=>{if(error.type==='wallet'){removeError(error.id);}});},2000);// Clear after 2 seconds\n}},[isConnected,errors,removeError]);const checkConnection=async()=>{try{setIsLoading(true);// Check if Web3 wallet is installed\nif(!window.ethereum){addWalletError('Web3 wallet (like MetaMask) is required to use this dApp.');return;}// Check if already connected (for page refresh)\nconst isAlreadyConnected=await walletManager.checkExistingConnection();if(isAlreadyConnected){setCurrentUser(walletManager.account);setIsConnected(true);// Initialize contract\nconst contractInstance=await contractManager.initializeContract(walletManager.provider,walletManager.signer);setContract(contractInstance);return;}}catch(error){console.error('Error checking connection:',error);}finally{setIsLoading(false);}};const handleWalletConnection=async()=>{try{setIsLoading(true);// Connect wallet\nconst{account,provider,signer}=await walletManager.connectWallet();setCurrentUser(account);setIsConnected(true);// Clear any existing wallet errors\nerrors.forEach(error=>{if(error.type==='wallet'){removeError(error.id);}});// Initialize contract\nconst contractInstance=await contractManager.initializeContract(provider,signer);setContract(contractInstance);}catch(error){console.error('Wallet connection error:',error);if(error.message.includes('MetaMask')){addWalletError('MetaMask is required to use this dApp.');}else if(error.message.includes('User rejected')){addWalletError('Connection request was rejected. Please try again.');}else if(error.message.includes('Contract not deployed')){addContractError('Smart contract not found.');}else{addWalletError('Failed to connect wallet. Please try again.');}// Reset state on error\nsetIsConnected(false);setCurrentUser(null);setContract(null);}finally{setIsLoading(false);}};const checkPublicKeyRegistration=async()=>{try{const hasKey=await contractManager.hasPublicKey(currentUser);setHasPublicKey(hasKey);if(!hasKey){setShowRegistration(true);addInfo('Please register your public key to start messaging.','Registration Required');}else{setShowRegistration(false);}}catch(error){console.error('Error checking public key:',error);addContractError('Failed to check registration status');}};const handleKeyRegistration=async publicKey=>{try{setIsLoading(true);addInfo('Registering your public key...','Registration');const result=await contractManager.registerPublicKey(publicKey);setHasPublicKey(true);setShowRegistration(false);addSuccess('Public key registered successfully! You can now start messaging.','Registration Complete');}catch(error){console.error('Public key registration error:',error);if(error.message.includes('already registered')){addContractError('Public key is already registered.');setHasPublicKey(true);setShowRegistration(false);}else if(error.message.includes('rejected')){addWalletError('Transaction was rejected. Please try again.');}else{addContractError(error.message||'Failed to register public key');}throw error;}finally{setIsLoading(false);}};const handleLogout=()=>{walletManager.disconnect();contractManager.removeAllListeners();setIsConnected(false);setCurrentUser(null);setHasPublicKey(false);setShowRegistration(false);setContract(null);addInfo('Wallet disconnected successfully.','Disconnected');};const formatAddress=address=>{return\"\".concat(address.slice(0,6),\"...\").concat(address.slice(-4));};return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},(!isConnected||errors.filter(e=>e.type!=='wallet').length>0)&&/*#__PURE__*/React.createElement(ErrorPanel,{errors:isConnected?errors.filter(e=>e.type!=='wallet'):errors,onDismiss:removeError,className:\"app-errors\"}),/*#__PURE__*/React.createElement(\"header\",{className:\"app-header\"},/*#__PURE__*/React.createElement(\"div\",{className:\"header-content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app-title\"},/*#__PURE__*/React.createElement(\"h1\",null,\"\\uD83D\\uDCAC Fluent Messenger\"),/*#__PURE__*/React.createElement(\"span\",{className:\"app-subtitle\"},\"Decentralized messaging on Fluent Network\")),/*#__PURE__*/React.createElement(\"div\",{className:\"header-info\"},/*#__PURE__*/React.createElement(\"div\",{className:\"network-badge\"},/*#__PURE__*/React.createElement(\"span\",{className:\"network-indicator\"}),\"Fluent Testnet\"),currentUser&&/*#__PURE__*/React.createElement(\"div\",{className:\"user-badge\"},/*#__PURE__*/React.createElement(\"span\",{className:\"user-avatar\"},formatAddress(currentUser).slice(0,2)),/*#__PURE__*/React.createElement(\"span\",{className:\"user-address\"},formatAddress(currentUser)))))),/*#__PURE__*/React.createElement(\"main\",{className:\"app-main\"},!isConnected?/*#__PURE__*/React.createElement(\"div\",{className:\"welcome-screen\"},/*#__PURE__*/React.createElement(\"div\",{className:\"welcome-content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"welcome-hero\"},/*#__PURE__*/React.createElement(\"h2\",null,\"\\uD83D\\uDE80 Welcome to Fluent Messenger\"),/*#__PURE__*/React.createElement(\"p\",null,\"A decentralized messaging application built on the Fluent blockchain network.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"features-grid\"},/*#__PURE__*/React.createElement(\"div\",{className:\"feature-card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"feature-icon\"},\"\\uD83D\\uDD12\"),/*#__PURE__*/React.createElement(\"h3\",null,\"Secure & Private\"),/*#__PURE__*/React.createElement(\"p\",null,\"Messages are encrypted and stored on the blockchain\")),/*#__PURE__*/React.createElement(\"div\",{className:\"feature-card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"feature-icon\"},\"\\u26A1\"),/*#__PURE__*/React.createElement(\"h3\",null,\"Real-Time\"),/*#__PURE__*/React.createElement(\"p\",null,\"Instant synchronization across all devices\")),/*#__PURE__*/React.createElement(\"div\",{className:\"feature-card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"feature-icon\"},\"\\uD83C\\uDF10\"),/*#__PURE__*/React.createElement(\"h3\",null,\"Decentralized\"),/*#__PURE__*/React.createElement(\"p\",null,\"No central servers, powered by blockchain\")),/*#__PURE__*/React.createElement(\"div\",{className:\"feature-card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"feature-icon\"},\"\\uD83D\\uDC8E\"),/*#__PURE__*/React.createElement(\"h3\",null,\"Permanent\"),/*#__PURE__*/React.createElement(\"p\",null,\"Your messages are stored permanently on-chain\"))),/*#__PURE__*/React.createElement(\"button\",{className:\"connect-wallet-btn\",onClick:handleWalletConnection,disabled:isLoading},isLoading?/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"spinner\"}),\"Connecting...\"):/*#__PURE__*/React.createElement(\"span\",null,\"\\uD83D\\uDD17 Connect Wallet\")),/*#__PURE__*/React.createElement(\"div\",{className:\"connection-requirements\"},/*#__PURE__*/React.createElement(\"h4\",null,\"\\uD83D\\uDCCB Requirements:\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"\\u2713 Web3 wallet extension (MetaMask, etc.) installed\"),/*#__PURE__*/React.createElement(\"li\",null,\"\\u2713 Connected to Fluent Testnet (Chain ID: 20994)\"),/*#__PURE__*/React.createElement(\"li\",null,\"\\u2713 Small amount of ETH for gas fees\")))))):showRegistration?/*#__PURE__*/React.createElement(KeyRegistration,{onRegister:handleKeyRegistration,isLoading:isLoading,currentUser:currentUser}):hasPublicKey?/*#__PURE__*/React.createElement(ChatRoom,{contractManager:contractManager,walletManager:walletManager,currentUser:currentUser,onLogout:handleLogout}):/*#__PURE__*/React.createElement(\"div\",{className:\"loading-screen\"},/*#__PURE__*/React.createElement(\"div\",{className:\"loading-content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"spinner large\"}),/*#__PURE__*/React.createElement(\"h3\",null,\"Loading your account...\"),/*#__PURE__*/React.createElement(\"p\",null,\"Please wait while we check your registration status.\")))),/*#__PURE__*/React.createElement(\"footer\",{className:\"app-footer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"footer-content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"footer-links\"},/*#__PURE__*/React.createElement(\"a\",{href:\"https://fluent.xyz\",target:\"_blank\",rel:\"noopener noreferrer\"},\"About Fluent\"),/*#__PURE__*/React.createElement(\"a\",{href:\"https://testnet.fluentscan.xyz\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Explorer\"),/*#__PURE__*/React.createElement(\"a\",{href:\"https://docs.fluent.xyz\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Documentation\"),/*#__PURE__*/React.createElement(\"a\",{href:\"https://testnet.gblend.xyz/\",target:\"_blank\",rel:\"noopener noreferrer\",className:\"faucet-link\"},\"\\uD83D\\uDEB0 Faucet\")),/*#__PURE__*/React.createElement(\"div\",{className:\"footer-info\"},/*#__PURE__*/React.createElement(\"span\",null,\"Built with \\u2764\\uFE0F for Fluent Network\"),contract&&/*#__PURE__*/React.createElement(\"span\",null,\"Contract: \",/*#__PURE__*/React.createElement(\"a\",{href:contractManager.getExplorerUrl(),target:\"_blank\",rel:\"noopener noreferrer\",className:\"contract-link\"},(_contractManager$getC=contractManager.getContractAddress())===null||_contractManager$getC===void 0?void 0:_contractManager$getC.slice(0,8),\"...\"))))));}export default App;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}