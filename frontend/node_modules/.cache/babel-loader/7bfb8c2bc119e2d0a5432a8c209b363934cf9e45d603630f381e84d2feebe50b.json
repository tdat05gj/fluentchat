{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-alchemy]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport { defineProperties, resolveProperties, assert, assertArgument, FetchRequest } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.alchemyapi.io\";\n    case \"goerli\":\n      return \"eth-goerli.g.alchemy.com\";\n    case \"sepolia\":\n      return \"eth-sepolia.g.alchemy.com\";\n    case \"arbitrum\":\n      return \"arb-mainnet.g.alchemy.com\";\n    case \"arbitrum-goerli\":\n      return \"arb-goerli.g.alchemy.com\";\n    case \"arbitrum-sepolia\":\n      return \"arb-sepolia.g.alchemy.com\";\n    case \"base\":\n      return \"base-mainnet.g.alchemy.com\";\n    case \"base-goerli\":\n      return \"base-goerli.g.alchemy.com\";\n    case \"base-sepolia\":\n      return \"base-sepolia.g.alchemy.com\";\n    case \"matic\":\n      return \"polygon-mainnet.g.alchemy.com\";\n    case \"matic-amoy\":\n      return \"polygon-amoy.g.alchemy.com\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.g.alchemy.com\";\n    case \"optimism\":\n      return \"opt-mainnet.g.alchemy.com\";\n    case \"optimism-goerli\":\n      return \"opt-goerli.g.alchemy.com\";\n    case \"optimism-sepolia\":\n      return \"opt-sepolia.g.alchemy.com\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider {\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = AlchemyProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    _defineProperty(this, \"apiKey\", void 0);\n    defineProperties(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new AlchemyProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  async _perform(req) {\n    // https://docs.alchemy.com/reference/trace-transaction\n    if (req.method === \"getTransactionResult\") {\n      const {\n        trace,\n        tx\n      } = await resolveProperties({\n        trace: this.send(\"trace_transaction\", [req.hash]),\n        tx: this.getTransaction(req.hash)\n      });\n      if (trace == null || tx == null) {\n        return null;\n      }\n      let data;\n      let error = false;\n      try {\n        data = trace[0].result.output;\n        error = trace[0].error === \"Reverted\";\n      } catch (error) {}\n      if (data) {\n        assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n          action: \"getTransactionResult\",\n          data,\n          reason: null,\n          transaction: tx,\n          invocation: null,\n          revert: null // @TODO\n        });\n        return data;\n      }\n      assert(false, \"could not parse trace result\", \"BAD_DATA\", {\n        value: trace\n      });\n    }\n    return await super._perform(req);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = new FetchRequest(\"https://\".concat(getHost(network.name), \"/v2/\").concat(apiKey));\n    request.allowGzip = true;\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"alchemy\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\n//# sourceMappingURL=provider-alchemy.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}