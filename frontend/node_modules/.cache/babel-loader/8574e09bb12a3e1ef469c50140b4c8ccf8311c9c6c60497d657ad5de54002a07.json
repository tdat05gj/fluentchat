{"ast":null,"code":"import React,{useState,useEffect}from'react';const ContactList=_ref=>{let{contacts,selectedContact,onSelectContact,currentUser,contractManager,onAddContact}=_ref;const[contactsWithLastMessage,setContactsWithLastMessage]=useState([]);const[unreadCounts,setUnreadCounts]=useState({});const[newContactAddress,setNewContactAddress]=useState('');const[showAddContact,setShowAddContact]=useState(false);const[isLoading,setIsLoading]=useState(false);useEffect(()=>{if(contacts&&contacts.length>0){loadContactsData();}},[contacts,contractManager]);const loadContactsData=async()=>{if(!contractManager||!contacts)return;setIsLoading(true);const contactsData=[];for(const contact of contacts){try{// Get last message\nconst lastMessage=await contractManager.getLastMessage(contact);// Get unread count (this would need to be implemented based on your logic)\nconst unreadCount=await getUnreadCountForContact(contact);contactsData.push({address:contact,lastMessage,unreadCount,avatar:generateAvatar(contact)});}catch(error){console.error(\"Error loading data for contact \".concat(contact,\":\"),error);contactsData.push({address:contact,lastMessage:null,unreadCount:0,avatar:generateAvatar(contact)});}}setContactsWithLastMessage(contactsData);setIsLoading(false);};const getUnreadCountForContact=async contactAddress=>{// This is a simplified implementation\n// In a real app, you'd need to track read/unread status per conversation\ntry{return 0;// Placeholder - implement based on your message tracking logic\n}catch(error){return 0;}};const generateAvatar=address=>{// Generate a simple avatar based on address\nconst colors=['#FF6B6B','#4ECDC4','#45B7D1','#96CEB4','#FFEAA7','#DDA0DD','#98D8C8'];const index=parseInt(address.slice(-2),16)%colors.length;return{backgroundColor:colors[index],initials:address.slice(2,4).toUpperCase()};};const formatAddress=address=>{return\"\".concat(address.slice(0,6),\"...\").concat(address.slice(-4));};const formatTimestamp=timestamp=>{if(!timestamp)return'';const now=new Date();const messageDate=new Date(timestamp);const diffInHours=Math.abs(now-messageDate)/36e5;if(diffInHours<1){return'Just now';}else if(diffInHours<24){return messageDate.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});}else{return messageDate.toLocaleDateString();}};const handleAddContact=async()=>{if(!newContactAddress.trim())return;const address=newContactAddress.trim();// Basic address validation\nif(!address.startsWith('0x')||address.length!==42){alert('Please enter a valid Ethereum address');return;}if(address.toLowerCase()===currentUser.toLowerCase()){alert('Cannot add yourself as a contact');return;}try{// Check if user has registered public key\nconst hasKey=await contractManager.hasPublicKey(address);if(!hasKey){alert('This user has not registered a public key yet');return;}onAddContact(address);setNewContactAddress('');setShowAddContact(false);}catch(error){console.error('Error adding contact:',error);alert('Failed to add contact: '+error.message);}};return/*#__PURE__*/React.createElement(\"div\",{className:\"contact-list\"},/*#__PURE__*/React.createElement(\"div\",{className:\"contact-list-header\"},/*#__PURE__*/React.createElement(\"h3\",null,\"\\uD83D\\uDCAC Conversations\"),/*#__PURE__*/React.createElement(\"button\",{className:\"btn-add-contact\",onClick:()=>setShowAddContact(!showAddContact),title:\"Add new contact\"},showAddContact?'✖️':'➕')),showAddContact&&/*#__PURE__*/React.createElement(\"div\",{className:\"add-contact-form\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"Enter wallet address (0x...)\",value:newContactAddress,onChange:e=>setNewContactAddress(e.target.value),className:\"add-contact-input\"}),/*#__PURE__*/React.createElement(\"button\",{onClick:handleAddContact,className:\"btn-add\",disabled:!newContactAddress.trim()},\"Add\")),isLoading?/*#__PURE__*/React.createElement(\"div\",{className:\"contact-loading\"},/*#__PURE__*/React.createElement(\"div\",{className:\"spinner\"}),/*#__PURE__*/React.createElement(\"p\",null,\"Loading contacts...\")):contactsWithLastMessage.length===0?/*#__PURE__*/React.createElement(\"div\",{className:\"no-contacts\"},/*#__PURE__*/React.createElement(\"div\",{className:\"no-contacts-icon\"},\"\\uD83D\\uDC65\"),/*#__PURE__*/React.createElement(\"h4\",null,\"No conversations yet\"),/*#__PURE__*/React.createElement(\"p\",null,\"Add a contact to start messaging!\"),!showAddContact&&/*#__PURE__*/React.createElement(\"button\",{className:\"btn-primary\",onClick:()=>setShowAddContact(true)},\"Add First Contact\")):/*#__PURE__*/React.createElement(\"div\",{className:\"contacts\"},contactsWithLastMessage.map(contact=>/*#__PURE__*/React.createElement(\"div\",{key:contact.address,className:\"contact-item \".concat(selectedContact===contact.address?'active':''),onClick:()=>onSelectContact(contact.address)},/*#__PURE__*/React.createElement(\"div\",{className:\"contact-avatar\",style:{backgroundColor:contact.avatar.backgroundColor}},contact.avatar.initials),/*#__PURE__*/React.createElement(\"div\",{className:\"contact-info\"},/*#__PURE__*/React.createElement(\"div\",{className:\"contact-name\"},formatAddress(contact.address)),/*#__PURE__*/React.createElement(\"div\",{className:\"contact-last-message\"},contact.lastMessage?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"span\",{className:\"message-preview \".concat(contact.lastMessage.sender===currentUser?'sent':'received')},contact.lastMessage.sender===currentUser?'You: ':'',contact.lastMessage.content.length>30?contact.lastMessage.content.substring(0,30)+'...':contact.lastMessage.content),/*#__PURE__*/React.createElement(\"span\",{className:\"message-timestamp\"},formatTimestamp(contact.lastMessage.timestamp))):/*#__PURE__*/React.createElement(\"span\",{className:\"no-messages\"},\"No messages yet\"))),contact.unreadCount>0&&/*#__PURE__*/React.createElement(\"div\",{className:\"unread-badge\"},contact.unreadCount)))));};export default ContactList;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}