{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { assertArgument, concat, encodeRlp, toBeArray } from \"../utils/index.js\";\n/**\n *  Computes the [[link-eip-7702]] authorization digest to sign.\n */\nexport function hashAuthorization(auth) {\n  assertArgument(typeof auth.address === \"string\", \"invalid address for hashAuthorization\", \"auth.address\", auth);\n  return keccak256(concat([\"0x05\", encodeRlp([auth.chainId != null ? toBeArray(auth.chainId) : \"0x\", getAddress(auth.address), auth.nonce != null ? toBeArray(auth.nonce) : \"0x\"])]));\n}\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nexport function verifyAuthorization(auth, sig) {\n  return recoverAddress(hashAuthorization(auth), sig);\n}\n//# sourceMappingURL=authorization.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}