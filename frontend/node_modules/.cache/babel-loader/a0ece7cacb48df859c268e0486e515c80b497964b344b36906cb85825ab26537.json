{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-blockscout]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Holesky Testnet (``holesky``)\n *  - Ethereum Classic (``classic``)\n *  - Arbitrum (``arbitrum``)\n *  - Base (``base``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Gnosis (``xdai``)\n *  - Optimism (``optimism``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Blockscout  [providers-blockscout]\n */\nimport { assertArgument, defineProperties, FetchRequest, isHexString } from \"../utils/index.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nfunction getUrl(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"https:/\\/eth.blockscout.com/api/eth-rpc\";\n    case \"sepolia\":\n      return \"https:/\\/eth-sepolia.blockscout.com/api/eth-rpc\";\n    case \"holesky\":\n      return \"https:/\\/eth-holesky.blockscout.com/api/eth-rpc\";\n    case \"classic\":\n      return \"https:/\\/etc.blockscout.com/api/eth-rpc\";\n    case \"arbitrum\":\n      return \"https:/\\/arbitrum.blockscout.com/api/eth-rpc\";\n    case \"base\":\n      return \"https:/\\/base.blockscout.com/api/eth-rpc\";\n    case \"base-sepolia\":\n      return \"https:/\\/base-sepolia.blockscout.com/api/eth-rpc\";\n    case \"matic\":\n      return \"https:/\\/polygon.blockscout.com/api/eth-rpc\";\n    case \"optimism\":\n      return \"https:/\\/optimism.blockscout.com/api/eth-rpc\";\n    case \"optimism-sepolia\":\n      return \"https:/\\/optimism-sepolia.blockscout.com/api/eth-rpc\";\n    case \"xdai\":\n      return \"https:/\\/gnosis.blockscout.com/api/eth-rpc\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **BlockscoutProvider** connects to the [[link-blockscout]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-blockscout).\n */\nexport class BlockscoutProvider extends JsonRpcProvider {\n  /**\n   *  Creates a new **BlockscoutProvider**.\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = null;\n    }\n    const request = BlockscoutProvider.getRequest(network);\n    super(request, network, {\n      staticNetwork: network\n    });\n    /**\n     *  The API key.\n     */\n    _defineProperty(this, \"apiKey\", void 0);\n    defineProperties(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new BlockscoutProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.apiKey === null;\n  }\n  getRpcRequest(req) {\n    // Blockscout enforces the TAG argument for estimateGas\n    const resp = super.getRpcRequest(req);\n    if (resp && resp.method === \"eth_estimateGas\" && resp.args.length == 1) {\n      resp.args = resp.args.slice();\n      resp.args.push(\"latest\");\n    }\n    return resp;\n  }\n  getRpcError(payload, _error) {\n    const error = _error ? _error.error : null;\n    // Blockscout currently drops the VM result and replaces it with a\n    // human-readable string, so we need to make it machine-readable.\n    if (error && error.code === -32015 && !isHexString(error.data || \"\", true)) {\n      const panicCodes = {\n        \"assert(false)\": \"01\",\n        \"arithmetic underflow or overflow\": \"11\",\n        \"division or modulo by zero\": \"12\",\n        \"out-of-bounds array access; popping on an empty array\": \"31\",\n        \"out-of-bounds access of an array or bytesN\": \"32\"\n      };\n      let panicCode = \"\";\n      if (error.message === \"VM execution error.\") {\n        // eth_call passes this message\n        panicCode = panicCodes[error.data] || \"\";\n      } else if (panicCodes[error.message || \"\"]) {\n        panicCode = panicCodes[error.message || \"\"];\n      }\n      if (panicCode) {\n        error.message += \" (reverted: \".concat(error.data, \")\");\n        error.data = \"0x4e487b7100000000000000000000000000000000000000000000000000000000000000\" + panicCode;\n      }\n    } else if (error && error.code === -32000) {\n      if (error.message === \"wrong transaction nonce\") {\n        error.message += \" (nonce too low)\";\n      }\n    }\n    return super.getRpcError(payload, _error);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%apiKey%%.\n   */\n  static getRequest(network) {\n    const request = new FetchRequest(getUrl(network.name));\n    request.allowGzip = true;\n    return request;\n  }\n}\n//# sourceMappingURL=provider-blockscout.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}