{"ast":null,"code":"// Cipher Feedback\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CFB extends ModeOfOperation {\n  constructor(key, iv) {\n    let segmentSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    super(\"CFB\", key, CFB);\n    _CFB_instances.add(this);\n    _CFB_iv.set(this, void 0);\n    _CFB_shiftRegister.set(this, void 0);\n    // This library currently only handles byte-aligned segmentSize\n    if (!Number.isInteger(segmentSize) || segmentSize % 8) {\n      throw new TypeError(\"invalid segmentSize\");\n    }\n    Object.defineProperties(this, {\n      segmentSize: {\n        enumerable: true,\n        value: segmentSize\n      }\n    });\n    if (iv) {\n      if (iv.length % 16) {\n        throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n      }\n      __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(iv), \"f\");\n    } else {\n      __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(16), \"f\");\n    }\n    __classPrivateFieldSet(this, _CFB_shiftRegister, this.iv, \"f\");\n  }\n  get iv() {\n    return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, \"f\"));\n  }\n  encrypt(plaintext) {\n    if (8 * plaintext.length % this.segmentSize) {\n      throw new TypeError(\"invalid plaintext size (must be multiple of segmentSize bytes)\");\n    }\n    const segmentSize = this.segmentSize / 8;\n    const ciphertext = new Uint8Array(plaintext);\n    for (let i = 0; i < ciphertext.length; i += segmentSize) {\n      const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n      for (let j = 0; j < segmentSize; j++) {\n        ciphertext[i + j] ^= xorSegment[j];\n      }\n      __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n    }\n    return ciphertext;\n  }\n  decrypt(ciphertext) {\n    if (8 * ciphertext.length % this.segmentSize) {\n      throw new TypeError(\"invalid ciphertext size (must be multiple of segmentSize bytes)\");\n    }\n    const segmentSize = this.segmentSize / 8;\n    const plaintext = new Uint8Array(ciphertext);\n    for (let i = 0; i < plaintext.length; i += segmentSize) {\n      const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n      for (let j = 0; j < segmentSize; j++) {\n        plaintext[i + j] ^= xorSegment[j];\n      }\n      __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n    }\n    return plaintext;\n  }\n}\n_CFB_iv = new WeakMap(), _CFB_shiftRegister = new WeakMap(), _CFB_instances = new WeakSet(), _CFB_shift = function _CFB_shift(data) {\n  const segmentSize = this.segmentSize / 8;\n  // Shift the register\n  __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").subarray(segmentSize));\n  __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(data.subarray(0, segmentSize), 16 - segmentSize);\n};\n//# sourceMappingURL=mode-cfb.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}