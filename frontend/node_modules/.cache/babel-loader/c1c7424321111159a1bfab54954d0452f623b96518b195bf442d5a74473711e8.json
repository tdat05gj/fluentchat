{"ast":null,"code":"import { ethers } from 'ethers';\nimport contractInfo from '../contractInfo.json';\nclass ContractManager {\n  constructor() {\n    this.contract = null;\n    this.provider = null;\n    this.signer = null;\n  }\n  async initializeContract(provider, signer) {\n    try {\n      this.provider = provider;\n      this.signer = signer;\n      if (!contractInfo.address || !contractInfo.abi) {\n        throw new Error('Contract not deployed or ABI missing. Please deploy the contract first.');\n      }\n      this.contract = new ethers.Contract(contractInfo.address, contractInfo.abi, signer);\n      return this.contract;\n    } catch (error) {\n      console.error('Error initializing contract:', error);\n      throw error;\n    }\n  }\n  getContract() {\n    if (!this.contract) {\n      throw new Error('Contract not initialized');\n    }\n    return this.contract;\n  }\n\n  // Public Key Management\n  async registerPublicKey(publicKey) {\n    try {\n      const contract = this.getContract();\n      const tx = await contract.registerPublicKey(publicKey);\n      const receipt = await tx.wait();\n      return {\n        success: true,\n        transactionHash: receipt.hash,\n        gasUsed: receipt.gasUsed.toString()\n      };\n    } catch (error) {\n      console.error('Error registering public key:', error);\n      throw this.parseContractError(error);\n    }\n  }\n  async hasPublicKey(address) {\n    try {\n      const contract = this.getContract();\n      return await contract.hasPublicKey(address);\n    } catch (error) {\n      console.error('Error checking public key:', error);\n      return false;\n    }\n  }\n  async getPublicKey(address) {\n    try {\n      const contract = this.getContract();\n      return await contract.getPublicKey(address);\n    } catch (error) {\n      console.error('Error getting public key:', error);\n      throw this.parseContractError(error);\n    }\n  }\n\n  // Message Management\n  async sendMessage(receiver, messageText) {\n    try {\n      const contract = this.getContract();\n      const encodedMessage = btoa(messageText); // Base64 encode\n\n      const tx = await contract.sendMessage(receiver, encodedMessage);\n      const receipt = await tx.wait();\n\n      // Create message object for immediate UI update\n      const newMessage = {\n        sender: await this.signer.getAddress(),\n        receiver: receiver,\n        message: messageText,\n        // Store original text, not encoded\n        timestamp: Date.now() // Use current time in milliseconds\n      };\n      return {\n        success: true,\n        transactionHash: receipt.hash,\n        gasUsed: receipt.gasUsed.toString(),\n        message: newMessage // Include message for immediate UI update\n      };\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw this.parseContractError(error);\n    }\n  }\n  async getConversation(otherUser) {\n    try {\n      const contract = this.getContract();\n      const messages = await contract.getConversation(otherUser);\n      return messages.map(msg => ({\n        sender: msg.sender,\n        receiver: msg.receiver,\n        message: this.decodeMessage(msg.encryptedContent),\n        // Use 'message' for consistency\n        timestamp: Number(msg.timestamp) * 1000,\n        // Convert to milliseconds\n        isRead: msg.isRead\n      }));\n    } catch (error) {\n      console.error('Error getting conversation:', error);\n      return [];\n    }\n  }\n  async getMessages(sender, receiver) {\n    try {\n      const contract = this.getContract();\n      const messages = await contract.getMessages(sender, receiver);\n      return messages.map(msg => ({\n        sender: msg.sender,\n        receiver: msg.receiver,\n        message: this.decodeMessage(msg.encryptedContent),\n        // Use 'message' for consistency\n        timestamp: Number(msg.timestamp) * 1000,\n        isRead: msg.isRead\n      }));\n    } catch (error) {\n      console.error('Error getting messages:', error);\n      return [];\n    }\n  }\n  async markMessageAsRead(messageIndex) {\n    try {\n      const contract = this.getContract();\n      const tx = await contract.markMessageAsRead(messageIndex);\n      await tx.wait();\n      return true;\n    } catch (error) {\n      console.error('Error marking message as read:', error);\n      return false;\n    }\n  }\n  async getContacts() {\n    try {\n      const contract = this.getContract();\n      return await contract.getContacts();\n    } catch (error) {\n      console.error('Error getting contacts:', error);\n      return [];\n    }\n  }\n  async getLastMessage(otherUser) {\n    try {\n      const contract = this.getContract();\n      const result = await contract.getLastMessage(otherUser);\n      return {\n        sender: result[0],\n        content: this.decodeMessage(result[1]),\n        timestamp: Number(result[2]) * 1000,\n        isRead: result[3]\n      };\n    } catch (error) {\n      console.error('Error getting last message:', error);\n      return null;\n    }\n  }\n  async getUnreadMessageCount(userAddress) {\n    try {\n      const contract = this.getContract();\n      const count = await contract.getUnreadMessageCount(userAddress);\n      return Number(count);\n    } catch (error) {\n      console.error('Error getting unread count:', error);\n      return 0;\n    }\n  }\n  async getTotalMessages() {\n    try {\n      const contract = this.getContract();\n      const total = await contract.totalMessages();\n      return Number(total);\n    } catch (error) {\n      console.error('Error getting total messages:', error);\n      return 0;\n    }\n  }\n\n  // Event Listeners\n  setupMessageListener(callback) {\n    if (!this.contract) return null;\n    try {\n      const filter = this.contract.filters.MessageSent();\n      this.contract.on(filter, (sender, receiver, encryptedContent, timestamp, messageIndex, event) => {\n        const decodedContent = this.decodeMessage(encryptedContent);\n        callback({\n          sender,\n          receiver,\n          content: decodedContent,\n          timestamp: Number(timestamp) * 1000,\n          messageIndex: Number(messageIndex),\n          transactionHash: event.log.transactionHash\n        });\n      });\n      return filter;\n    } catch (error) {\n      console.error('Error setting up message listener:', error);\n      return null;\n    }\n  }\n  setupPublicKeyListener(callback) {\n    if (!this.contract) return null;\n    try {\n      const filter = this.contract.filters.PublicKeyRegistered();\n      this.contract.on(filter, (user, publicKey, event) => {\n        callback({\n          user,\n          publicKey,\n          transactionHash: event.log.transactionHash\n        });\n      });\n      return filter;\n    } catch (error) {\n      console.error('Error setting up public key listener:', error);\n      return null;\n    }\n  }\n  removeAllListeners() {\n    if (this.contract) {\n      this.contract.removeAllListeners();\n    }\n  }\n\n  // Event Listeners\n  listenForMessages(callback) {\n    try {\n      const contract = this.getContract();\n\n      // Remove existing listeners\n      contract.removeAllListeners('MessageSent');\n\n      // Add new listener\n      contract.on('MessageSent', (sender, receiver, message, timestamp) => {\n        const messageObj = {\n          sender: sender,\n          receiver: receiver,\n          message: this.decodeMessage(message),\n          timestamp: Number(timestamp)\n        };\n        callback(messageObj);\n      });\n      console.log('Message event listener added');\n    } catch (error) {\n      console.error('Error setting up message listener:', error);\n    }\n  }\n  removeMessageListeners() {\n    try {\n      if (this.contract) {\n        this.contract.removeAllListeners('MessageSent');\n        console.log('Message event listeners removed');\n      }\n    } catch (error) {\n      console.error('Error removing message listeners:', error);\n    }\n  }\n\n  // Utility Methods\n  decodeMessage(encodedMessage) {\n    try {\n      // Check if message is actually encoded\n      if (!encodedMessage || typeof encodedMessage !== 'string') {\n        return encodedMessage || '';\n      }\n\n      // Try to decode, if it fails, return original\n      // Check if it looks like base64 (only contains valid base64 characters)\n      const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;\n      if (base64Regex.test(encodedMessage) && encodedMessage.length % 4 === 0) {\n        return atob(encodedMessage);\n      } else {\n        // Not base64 encoded, return as is\n        return encodedMessage;\n      }\n    } catch (error) {\n      console.warn('Failed to decode message, using original:', encodedMessage);\n      return encodedMessage; // Return original if decode fails\n    }\n  }\n  parseContractError(error) {\n    // Extract meaningful error messages from contract errors\n    if (error.reason) {\n      return new Error(error.reason);\n    }\n    if (error.data && error.data.message) {\n      return new Error(error.data.message);\n    }\n    if (error.message.includes('execution reverted')) {\n      const match = error.message.match(/execution reverted: (.+)/);\n      if (match) {\n        return new Error(match[1]);\n      }\n      return new Error('Transaction reverted');\n    }\n    if (error.message.includes('user rejected transaction')) {\n      return new Error('Transaction was rejected by user');\n    }\n    if (error.message.includes('insufficient funds')) {\n      return new Error('Insufficient funds for transaction');\n    }\n    return error;\n  }\n  getContractAddress() {\n    return contractInfo.address;\n  }\n  getExplorerUrl() {\n    return contractInfo.explorerUrl || `https://testnet.fluentscan.xyz/address/${contractInfo.address}`;\n  }\n}\nexport default new ContractManager();","map":{"version":3,"names":["ethers","contractInfo","ContractManager","constructor","contract","provider","signer","initializeContract","address","abi","Error","Contract","error","console","getContract","registerPublicKey","publicKey","tx","receipt","wait","success","transactionHash","hash","gasUsed","toString","parseContractError","hasPublicKey","getPublicKey","sendMessage","receiver","messageText","encodedMessage","btoa","newMessage","sender","getAddress","message","timestamp","Date","now","getConversation","otherUser","messages","map","msg","decodeMessage","encryptedContent","Number","isRead","getMessages","markMessageAsRead","messageIndex","getContacts","getLastMessage","result","content","getUnreadMessageCount","userAddress","count","getTotalMessages","total","totalMessages","setupMessageListener","callback","filter","filters","MessageSent","on","event","decodedContent","log","setupPublicKeyListener","PublicKeyRegistered","user","removeAllListeners","listenForMessages","messageObj","removeMessageListeners","base64Regex","test","length","atob","warn","reason","data","includes","match","getContractAddress","getExplorerUrl","explorerUrl"],"sources":["C:/Users/Admin/Desktop/fluent_GJ/frontend/src/utils/contract.js"],"sourcesContent":["import { ethers } from 'ethers';\r\nimport contractInfo from '../contractInfo.json';\r\n\r\nclass ContractManager {\r\n  constructor() {\r\n    this.contract = null;\r\n    this.provider = null;\r\n    this.signer = null;\r\n  }\r\n\r\n  async initializeContract(provider, signer) {\r\n    try {\r\n      this.provider = provider;\r\n      this.signer = signer;\r\n\r\n      if (!contractInfo.address || !contractInfo.abi) {\r\n        throw new Error('Contract not deployed or ABI missing. Please deploy the contract first.');\r\n      }\r\n\r\n      this.contract = new ethers.Contract(\r\n        contractInfo.address,\r\n        contractInfo.abi,\r\n        signer\r\n      );\r\n\r\n      return this.contract;\r\n    } catch (error) {\r\n      console.error('Error initializing contract:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getContract() {\r\n    if (!this.contract) {\r\n      throw new Error('Contract not initialized');\r\n    }\r\n    return this.contract;\r\n  }\r\n\r\n  // Public Key Management\r\n  async registerPublicKey(publicKey) {\r\n    try {\r\n      const contract = this.getContract();\r\n      const tx = await contract.registerPublicKey(publicKey);\r\n      const receipt = await tx.wait();\r\n      \r\n      return {\r\n        success: true,\r\n        transactionHash: receipt.hash,\r\n        gasUsed: receipt.gasUsed.toString()\r\n      };\r\n    } catch (error) {\r\n      console.error('Error registering public key:', error);\r\n      throw this.parseContractError(error);\r\n    }\r\n  }\r\n\r\n  async hasPublicKey(address) {\r\n    try {\r\n      const contract = this.getContract();\r\n      return await contract.hasPublicKey(address);\r\n    } catch (error) {\r\n      console.error('Error checking public key:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getPublicKey(address) {\r\n    try {\r\n      const contract = this.getContract();\r\n      return await contract.getPublicKey(address);\r\n    } catch (error) {\r\n      console.error('Error getting public key:', error);\r\n      throw this.parseContractError(error);\r\n    }\r\n  }\r\n\r\n  // Message Management\r\n  async sendMessage(receiver, messageText) {\r\n    try {\r\n      const contract = this.getContract();\r\n      const encodedMessage = btoa(messageText); // Base64 encode\r\n      \r\n      const tx = await contract.sendMessage(receiver, encodedMessage);\r\n      const receipt = await tx.wait();\r\n      \r\n      // Create message object for immediate UI update\r\n      const newMessage = {\r\n        sender: await this.signer.getAddress(),\r\n        receiver: receiver,\r\n        message: messageText, // Store original text, not encoded\r\n        timestamp: Date.now() // Use current time in milliseconds\r\n      };\r\n      \r\n      return {\r\n        success: true,\r\n        transactionHash: receipt.hash,\r\n        gasUsed: receipt.gasUsed.toString(),\r\n        message: newMessage // Include message for immediate UI update\r\n      };\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      throw this.parseContractError(error);\r\n    }\r\n  }\r\n\r\n  async getConversation(otherUser) {\r\n    try {\r\n      const contract = this.getContract();\r\n      const messages = await contract.getConversation(otherUser);\r\n      \r\n      return messages.map(msg => ({\r\n        sender: msg.sender,\r\n        receiver: msg.receiver,\r\n        message: this.decodeMessage(msg.encryptedContent), // Use 'message' for consistency\r\n        timestamp: Number(msg.timestamp) * 1000, // Convert to milliseconds\r\n        isRead: msg.isRead\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting conversation:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getMessages(sender, receiver) {\r\n    try {\r\n      const contract = this.getContract();\r\n      const messages = await contract.getMessages(sender, receiver);\r\n      \r\n      return messages.map(msg => ({\r\n        sender: msg.sender,\r\n        receiver: msg.receiver,\r\n        message: this.decodeMessage(msg.encryptedContent), // Use 'message' for consistency\r\n        timestamp: Number(msg.timestamp) * 1000,\r\n        isRead: msg.isRead\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting messages:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async markMessageAsRead(messageIndex) {\r\n    try {\r\n      const contract = this.getContract();\r\n      const tx = await contract.markMessageAsRead(messageIndex);\r\n      await tx.wait();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error marking message as read:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getContacts() {\r\n    try {\r\n      const contract = this.getContract();\r\n      return await contract.getContacts();\r\n    } catch (error) {\r\n      console.error('Error getting contacts:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getLastMessage(otherUser) {\r\n    try {\r\n      const contract = this.getContract();\r\n      const result = await contract.getLastMessage(otherUser);\r\n      \r\n      return {\r\n        sender: result[0],\r\n        content: this.decodeMessage(result[1]),\r\n        timestamp: Number(result[2]) * 1000,\r\n        isRead: result[3]\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting last message:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getUnreadMessageCount(userAddress) {\r\n    try {\r\n      const contract = this.getContract();\r\n      const count = await contract.getUnreadMessageCount(userAddress);\r\n      return Number(count);\r\n    } catch (error) {\r\n      console.error('Error getting unread count:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  async getTotalMessages() {\r\n    try {\r\n      const contract = this.getContract();\r\n      const total = await contract.totalMessages();\r\n      return Number(total);\r\n    } catch (error) {\r\n      console.error('Error getting total messages:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Event Listeners\r\n  setupMessageListener(callback) {\r\n    if (!this.contract) return null;\r\n\r\n    try {\r\n      const filter = this.contract.filters.MessageSent();\r\n      \r\n      this.contract.on(filter, (sender, receiver, encryptedContent, timestamp, messageIndex, event) => {\r\n        const decodedContent = this.decodeMessage(encryptedContent);\r\n        callback({\r\n          sender,\r\n          receiver,\r\n          content: decodedContent,\r\n          timestamp: Number(timestamp) * 1000,\r\n          messageIndex: Number(messageIndex),\r\n          transactionHash: event.log.transactionHash\r\n        });\r\n      });\r\n\r\n      return filter;\r\n    } catch (error) {\r\n      console.error('Error setting up message listener:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  setupPublicKeyListener(callback) {\r\n    if (!this.contract) return null;\r\n\r\n    try {\r\n      const filter = this.contract.filters.PublicKeyRegistered();\r\n      \r\n      this.contract.on(filter, (user, publicKey, event) => {\r\n        callback({\r\n          user,\r\n          publicKey,\r\n          transactionHash: event.log.transactionHash\r\n        });\r\n      });\r\n\r\n      return filter;\r\n    } catch (error) {\r\n      console.error('Error setting up public key listener:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  removeAllListeners() {\r\n    if (this.contract) {\r\n      this.contract.removeAllListeners();\r\n    }\r\n  }\r\n\r\n  // Event Listeners\r\n  listenForMessages(callback) {\r\n    try {\r\n      const contract = this.getContract();\r\n      \r\n      // Remove existing listeners\r\n      contract.removeAllListeners('MessageSent');\r\n      \r\n      // Add new listener\r\n      contract.on('MessageSent', (sender, receiver, message, timestamp) => {\r\n        const messageObj = {\r\n          sender: sender,\r\n          receiver: receiver,\r\n          message: this.decodeMessage(message),\r\n          timestamp: Number(timestamp)\r\n        };\r\n        \r\n        callback(messageObj);\r\n      });\r\n      \r\n      console.log('Message event listener added');\r\n    } catch (error) {\r\n      console.error('Error setting up message listener:', error);\r\n    }\r\n  }\r\n\r\n  removeMessageListeners() {\r\n    try {\r\n      if (this.contract) {\r\n        this.contract.removeAllListeners('MessageSent');\r\n        console.log('Message event listeners removed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error removing message listeners:', error);\r\n    }\r\n  }\r\n\r\n  // Utility Methods\r\n  decodeMessage(encodedMessage) {\r\n    try {\r\n      // Check if message is actually encoded\r\n      if (!encodedMessage || typeof encodedMessage !== 'string') {\r\n        return encodedMessage || '';\r\n      }\r\n      \r\n      // Try to decode, if it fails, return original\r\n      // Check if it looks like base64 (only contains valid base64 characters)\r\n      const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;\r\n      if (base64Regex.test(encodedMessage) && encodedMessage.length % 4 === 0) {\r\n        return atob(encodedMessage);\r\n      } else {\r\n        // Not base64 encoded, return as is\r\n        return encodedMessage;\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to decode message, using original:', encodedMessage);\r\n      return encodedMessage; // Return original if decode fails\r\n    }\r\n  }\r\n\r\n  parseContractError(error) {\r\n    // Extract meaningful error messages from contract errors\r\n    if (error.reason) {\r\n      return new Error(error.reason);\r\n    }\r\n    \r\n    if (error.data && error.data.message) {\r\n      return new Error(error.data.message);\r\n    }\r\n    \r\n    if (error.message.includes('execution reverted')) {\r\n      const match = error.message.match(/execution reverted: (.+)/);\r\n      if (match) {\r\n        return new Error(match[1]);\r\n      }\r\n      return new Error('Transaction reverted');\r\n    }\r\n    \r\n    if (error.message.includes('user rejected transaction')) {\r\n      return new Error('Transaction was rejected by user');\r\n    }\r\n    \r\n    if (error.message.includes('insufficient funds')) {\r\n      return new Error('Insufficient funds for transaction');\r\n    }\r\n    \r\n    return error;\r\n  }\r\n\r\n  getContractAddress() {\r\n    return contractInfo.address;\r\n  }\r\n\r\n  getExplorerUrl() {\r\n    return contractInfo.explorerUrl || `https://testnet.fluentscan.xyz/address/${contractInfo.address}`;\r\n  }\r\n}\r\n\r\nexport default new ContractManager();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}