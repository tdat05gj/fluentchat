{"ast":null,"code":"import { assertArgument } from \"../utils/index.js\";\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n  let initial = 97;\n  return words.reduce((accum, word) => {\n    if (word === sep) {\n      initial++;\n    } else if (word.match(Word)) {\n      accum.push(String.fromCharCode(initial) + word);\n    } else {\n      initial = 97;\n      accum.push(word);\n    }\n    return accum;\n  }, []);\n}\n/**\n *  @_ignore\n */\nexport function decode(data, subs) {\n  // Replace all the substitutions with their expanded form\n  for (let i = subsChrs.length - 1; i >= 0; i--) {\n    data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n  }\n  // Get all tle clumps; each suffix, first-increment and second-increment\n  const clumps = [];\n  const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\n    if (semi) {\n      for (let i = parseInt(semi); i >= 0; i--) {\n        clumps.push(\";\");\n      }\n    } else {\n      clumps.push(item.toLowerCase());\n    }\n    return \"\";\n  });\n  /* c8 ignore start */\n  if (leftover) {\n    throw new Error(\"leftovers: \".concat(JSON.stringify(leftover)));\n  }\n  /* c8 ignore stop */\n  return unfold(unfold(clumps, \";\"), \":\");\n}\n/**\n *  @_ignore\n */\nexport function decodeOwl(data) {\n  assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n  return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n}\n//# sourceMappingURL=decode-owl.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}