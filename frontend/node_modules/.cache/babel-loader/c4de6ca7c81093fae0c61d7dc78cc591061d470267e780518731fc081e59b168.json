{"ast":null,"code":"import _classPrivateFieldInitSpec from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { Log, TransactionReceipt, TransactionResponse } from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n  /**\n   * @_ignore:\n   */\n  constructor(log, iface, fragment) {\n    super(log, log.provider);\n    /**\n     *  The Contract Interface.\n     */\n    _defineProperty(this, \"interface\", void 0);\n    /**\n     *  The matching event.\n     */\n    _defineProperty(this, \"fragment\", void 0);\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    _defineProperty(this, \"args\", void 0);\n    const args = iface.decodeEventLog(fragment, log.data, log.topics);\n    defineProperties(this, {\n      args,\n      fragment,\n      interface: iface\n    });\n  }\n  /**\n   *  The name of the event.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The signature of the event.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n  /**\n   * @_ignore:\n   */\n  constructor(log, error) {\n    super(log, log.provider);\n    /**\n     *  The error encounted when trying to decode the log.\n     */\n    _defineProperty(this, \"error\", void 0);\n    defineProperties(this, {\n      error\n    });\n  }\n}\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nvar _iface = /*#__PURE__*/new WeakMap();\nexport class ContractTransactionReceipt extends TransactionReceipt {\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    _classPrivateFieldInitSpec(this, _iface, void 0);\n    _classPrivateFieldSet(_iface, this, iface);\n  }\n  /**\n   *  The parsed logs for any [[Log]] which has a matching event in the\n   *  Contract ABI.\n   */\n  get logs() {\n    return super.logs.map(log => {\n      const fragment = log.topics.length ? _classPrivateFieldGet(_iface, this).getEvent(log.topics[0]) : null;\n      if (fragment) {\n        try {\n          return new EventLog(log, _classPrivateFieldGet(_iface, this), fragment);\n        } catch (error) {\n          return new UndecodedEventLog(log, error);\n        }\n      }\n      return log;\n    });\n  }\n}\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nvar _iface2 = /*#__PURE__*/new WeakMap();\nexport class ContractTransactionResponse extends TransactionResponse {\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    _classPrivateFieldInitSpec(this, _iface2, void 0);\n    _classPrivateFieldSet(_iface2, this, iface);\n  }\n  /**\n   *  Resolves once this transaction has been mined and has\n   *  %%confirms%% blocks including it (default: ``1``) with an\n   *  optional %%timeout%%.\n   *\n   *  This can resolve to ``null`` only if %%confirms%% is ``0``\n   *  and the transaction has not been mined, otherwise this will\n   *  wait until enough confirmations have completed.\n   */\n  async wait(confirms, timeout) {\n    const receipt = await super.wait(confirms, timeout);\n    if (receipt == null) {\n      return null;\n    }\n    return new ContractTransactionReceipt(_classPrivateFieldGet(_iface2, this), this.provider, receipt);\n  }\n}\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport class ContractUnknownEventPayload extends EventPayload {\n  /**\n   *  @_event:\n   */\n  constructor(contract, listener, filter, log) {\n    super(contract, listener, filter);\n    /**\n     *  The log with no matching events.\n     */\n    _defineProperty(this, \"log\", void 0);\n    defineProperties(this, {\n      log\n    });\n  }\n  /**\n   *  Resolves to the block the event occured in.\n   */\n  async getBlock() {\n    return await this.log.getBlock();\n  }\n  /**\n   *  Resolves to the transaction the event occured in.\n   */\n  async getTransaction() {\n    return await this.log.getTransaction();\n  }\n  /**\n   *  Resolves to the transaction receipt the event occured in.\n   */\n  async getTransactionReceipt() {\n    return await this.log.getTransactionReceipt();\n  }\n}\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n  /**\n   *  @_ignore:\n   */\n  constructor(contract, listener, filter, fragment, _log) {\n    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n    defineProperties(this, {\n      args,\n      fragment\n    });\n  }\n  /**\n   *  The event name.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The event signature.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\n//# sourceMappingURL=wrappers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}