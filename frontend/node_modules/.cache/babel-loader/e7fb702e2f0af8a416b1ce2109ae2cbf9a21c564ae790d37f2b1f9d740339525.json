{"ast":null,"code":"import _classPrivateFieldInitSpec from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _defineProperty from \"C:/Users/Admin/Desktop/fluent_GJ/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Holesky Testnet (``holesky``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Base (``base``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, hexlify, toQuantity, FetchRequest, assert, assertArgument, isError,\n//    parseUnits,\ntoUtf8String } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\nconst THROTTLE = 2000;\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanPlugin extends NetworkPlugin {\n  /**\n   *  Creates a new **EtherscanProvider** which will use\n   *  %%baseUrl%%.\n   */\n  constructor(baseUrl) {\n    super(EtherscanPluginId);\n    /**\n     *  The Etherscan API base URL.\n     */\n    _defineProperty(this, \"baseUrl\", void 0);\n    defineProperties(this, {\n      baseUrl\n    });\n  }\n  clone() {\n    return new EtherscanPlugin(this.baseUrl);\n  }\n}\nconst skipKeys = [\"enableCcipRead\"];\nlet nextId = 1;\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nvar _plugin = /*#__PURE__*/new WeakMap();\nexport class EtherscanProvider extends AbstractProvider {\n  /**\n   *  Creates a new **EtherscanBaseProvider**.\n   */\n  constructor(_network, _apiKey) {\n    const apiKey = _apiKey != null ? _apiKey : null;\n    super();\n    /**\n     *  The connected network.\n     */\n    _defineProperty(this, \"network\", void 0);\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    _defineProperty(this, \"apiKey\", void 0);\n    _classPrivateFieldInitSpec(this, _plugin, void 0);\n    const network = Network.from(_network);\n    _classPrivateFieldSet(_plugin, this, network.getPlugin(EtherscanPluginId));\n    defineProperties(this, {\n      apiKey,\n      network\n    });\n  }\n  /**\n   *  Returns the base URL.\n   *\n   *  If an [[EtherscanPlugin]] is configured on the\n   *  [[EtherscanBaseProvider_network]], returns the plugin's\n   *  baseUrl.\n   *\n   *  Deprecated; for Etherscan v2 the base is no longer a simply\n   *  host, but instead a URL including a chainId parameter. Changing\n   *  this to return a URL prefix could break some libraries, so it\n   *  is left intact but will be removed in the future as it is unused.\n   */\n  getBaseUrl() {\n    if (_classPrivateFieldGet(_plugin, this)) {\n      return _classPrivateFieldGet(_plugin, this).baseUrl;\n    }\n    switch (this.network.name) {\n      case \"mainnet\":\n        return \"https:/\\/api.etherscan.io\";\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n      case \"sepolia\":\n        return \"https:/\\/api-sepolia.etherscan.io\";\n      case \"holesky\":\n        return \"https:/\\/api-holesky.etherscan.io\";\n      case \"arbitrum\":\n        return \"https:/\\/api.arbiscan.io\";\n      case \"arbitrum-goerli\":\n        return \"https:/\\/api-goerli.arbiscan.io\";\n      case \"base\":\n        return \"https:/\\/api.basescan.org\";\n      case \"base-sepolia\":\n        return \"https:/\\/api-sepolia.basescan.org\";\n      case \"bnb\":\n        return \"https:/\\/api.bscscan.com\";\n      case \"bnbt\":\n        return \"https:/\\/api-testnet.bscscan.com\";\n      case \"matic\":\n        return \"https:/\\/api.polygonscan.com\";\n      case \"matic-amoy\":\n        return \"https:/\\/api-amoy.polygonscan.com\";\n      case \"matic-mumbai\":\n        return \"https:/\\/api-testnet.polygonscan.com\";\n      case \"optimism\":\n        return \"https:/\\/api-optimistic.etherscan.io\";\n      case \"optimism-goerli\":\n        return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n      default:\n    }\n    assertArgument(false, \"unsupported network\", \"network\", this.network);\n  }\n  /**\n   *  Returns the URL for the %%module%% and %%params%%.\n   */\n  getUrl(module, params) {\n    let query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n      if (value != null) {\n        accum += \"&\".concat(key, \"=\").concat(value);\n      }\n      return accum;\n    }, \"\");\n    if (this.apiKey) {\n      query += \"&apikey=\".concat(this.apiKey);\n    }\n    return \"https://api.etherscan.io/v2/api?chainid=\".concat(this.network.chainId, \"&module=\").concat(module).concat(query);\n  }\n  /**\n   *  Returns the URL for using POST requests.\n   */\n  getPostUrl() {\n    return \"https://api.etherscan.io/v2/api?chainid=\".concat(this.network.chainId);\n  }\n  /**\n   *  Returns the parameters for using POST requests.\n   */\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    params.chainid = this.network.chainId;\n    return params;\n  }\n  async detectNetwork() {\n    return this.network;\n  }\n  /**\n   *  Resolves to the result of calling %%module%% with %%params%%.\n   *\n   *  If %%post%%, the request is made as a POST request.\n   */\n  async fetch(module, params, post) {\n    const id = nextId++;\n    const url = post ? this.getPostUrl() : this.getUrl(module, params);\n    const payload = post ? this.getPostData(module, params) : null;\n    this.emit(\"debug\", {\n      action: \"sendRequest\",\n      id,\n      url,\n      payload: payload\n    });\n    const request = new FetchRequest(url);\n    request.setThrottleParams({\n      slotInterval: 1000\n    });\n    request.retryFunc = (req, resp, attempt) => {\n      if (this.isCommunityResource()) {\n        showThrottleMessage(\"Etherscan\");\n      }\n      return Promise.resolve(true);\n    };\n    request.processFunc = async (request, response) => {\n      const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)) : {};\n      const throttle = (typeof result.result === \"string\" ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n      if (module === \"proxy\") {\n        // This JSON response indicates we are being throttled\n        if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n          this.emit(\"debug\", {\n            action: \"receiveError\",\n            id,\n            reason: \"proxy-NOTOK\",\n            error: result\n          });\n          response.throwThrottleError(result.result, THROTTLE);\n        }\n      } else {\n        if (throttle) {\n          this.emit(\"debug\", {\n            action: \"receiveError\",\n            id,\n            reason: \"null result\",\n            error: result.result\n          });\n          response.throwThrottleError(result.result, THROTTLE);\n        }\n      }\n      return response;\n    };\n    if (payload) {\n      request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n      request.body = Object.keys(payload).map(k => \"\".concat(k, \"=\").concat(payload[k])).join(\"&\");\n    }\n    const response = await request.send();\n    try {\n      response.assertOk();\n    } catch (error) {\n      this.emit(\"debug\", {\n        action: \"receiveError\",\n        id,\n        error,\n        reason: \"assertOk\"\n      });\n      assert(false, \"response error\", \"SERVER_ERROR\", {\n        request,\n        response\n      });\n    }\n    if (!response.hasBody()) {\n      this.emit(\"debug\", {\n        action: \"receiveError\",\n        id,\n        error: \"missing body\",\n        reason: \"null body\"\n      });\n      assert(false, \"missing response\", \"SERVER_ERROR\", {\n        request,\n        response\n      });\n    }\n    const result = JSON.parse(toUtf8String(response.body));\n    if (module === \"proxy\") {\n      if (result.jsonrpc != \"2.0\") {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result,\n          reason: \"invalid JSON-RPC\"\n        });\n        assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n      if (result.error) {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result,\n          reason: \"JSON-RPC error\"\n        });\n        assert(false, \"error response\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n      this.emit(\"debug\", {\n        action: \"receiveRequest\",\n        id,\n        result\n      });\n      return result.result;\n    } else {\n      // getLogs, getHistory have weird success responses\n      if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        this.emit(\"debug\", {\n          action: \"receiveRequest\",\n          id,\n          result\n        });\n        return result.result;\n      }\n      if (result.status != 1 || typeof result.message === \"string\" && !result.message.match(/^OK/)) {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result\n        });\n        assert(false, \"error response\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n      this.emit(\"debug\", {\n        action: \"receiveRequest\",\n        id,\n        result\n      });\n      return result.result;\n    }\n  }\n  /**\n   *  Returns %%transaction%% normalized for the Etherscan API.\n   */\n  _getTransactionPostData(transaction) {\n    const result = {};\n    for (let key in transaction) {\n      if (skipKeys.indexOf(key) >= 0) {\n        continue;\n      }\n      if (transaction[key] == null) {\n        continue;\n      }\n      let value = transaction[key];\n      if (key === \"type\" && value === 0) {\n        continue;\n      }\n      if (key === \"blockTag\" && value === \"latest\") {\n        continue;\n      }\n      // Quantity-types require no leading zero, unless 0\n      if ({\n        type: true,\n        gasLimit: true,\n        gasPrice: true,\n        maxFeePerGs: true,\n        maxPriorityFeePerGas: true,\n        nonce: true,\n        value: true\n      }[key]) {\n        value = toQuantity(value);\n      } else if (key === \"accessList\") {\n        value = \"[\" + accessListify(value).map(set => {\n          return \"{address:\\\"\".concat(set.address, \"\\\",storageKeys:[\\\"\").concat(set.storageKeys.join('\",\"'), \"\\\"]}\");\n        }).join(\",\") + \"]\";\n      } else if (key === \"blobVersionedHashes\") {\n        if (value.length === 0) {\n          continue;\n        }\n        // @TODO: update this once the API supports blobs\n        assert(false, \"Etherscan API does not support blobVersionedHashes\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"_getTransactionPostData\",\n          info: {\n            transaction\n          }\n        });\n      } else {\n        value = hexlify(value);\n      }\n      result[key] = value;\n    }\n    return result;\n  }\n  /**\n   *  Throws the normalized Etherscan error.\n   */\n  _checkError(req, error, transaction) {\n    // Pull any message out if, possible\n    let message = \"\";\n    if (isError(error, \"SERVER_ERROR\")) {\n      // Check for an error emitted by a proxy call\n      try {\n        message = error.info.result.error.message;\n      } catch (e) {}\n      if (!message) {\n        try {\n          message = error.info.message;\n        } catch (e) {}\n      }\n    }\n    if (req.method === \"estimateGas\") {\n      if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n        assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n          transaction: req.transaction\n        });\n      }\n    }\n    if (req.method === \"call\" || req.method === \"estimateGas\") {\n      if (message.match(/execution reverted/i)) {\n        let data = \"\";\n        try {\n          data = error.info.result.error.data;\n        } catch (error) {}\n        const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\n        e.info = {\n          request: req,\n          error\n        };\n        throw e;\n      }\n    }\n    if (message) {\n      if (req.method === \"broadcastTransaction\") {\n        const transaction = Transaction.from(req.signedTransaction);\n        if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n          assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n            transaction\n          });\n        }\n        if (message.match(/insufficient funds/)) {\n          assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n            transaction\n          });\n        }\n        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n          assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n            transaction\n          });\n        }\n      }\n    }\n    // Something we could not process\n    throw error;\n  }\n  async _detectNetwork() {\n    return this.network;\n  }\n  async _perform(req) {\n    switch (req.method) {\n      case \"chainId\":\n        return this.network.chainId;\n      case \"getBlockNumber\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_blockNumber\"\n        });\n      case \"getGasPrice\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_gasPrice\"\n        });\n      case \"getPriorityFee\":\n        // This is temporary until Etherscan completes support\n        if (this.network.name === \"mainnet\") {\n          return \"1000000000\";\n        } else if (this.network.name === \"optimism\") {\n          return \"1000000\";\n        } else {\n          throw new Error(\"fallback onto the AbstractProvider default\");\n        }\n      /* Working with Etherscan to get this added:\n      try {\n          const test = await this.fetch(\"proxy\", {\n              action: \"eth_maxPriorityFeePerGas\"\n          });\n          console.log(test);\n          return test;\n      } catch (e) {\n          console.log(\"DEBUG\", e);\n          throw e;\n      }\n      */\n      /* This might be safe; but due to rounding neither myself\n         or Etherscan are necessarily comfortable with this. :)\n      try {\n          const result = await this.fetch(\"gastracker\", { action: \"gasoracle\" });\n          console.log(result);\n          const gasPrice = parseUnits(result.SafeGasPrice, \"gwei\");\n          const baseFee = parseUnits(result.suggestBaseFee, \"gwei\");\n          const priorityFee = gasPrice - baseFee;\n          if (priorityFee < 0) { throw new Error(\"negative priority fee; defer to abstract provider default\"); }\n          return priorityFee;\n      } catch (error) {\n          console.log(\"DEBUG\", error);\n          throw error;\n      }\n      */\n      case \"getBalance\":\n        // Returns base-10 result\n        return this.fetch(\"account\", {\n          action: \"balance\",\n          address: req.address,\n          tag: req.blockTag\n        });\n      case \"getTransactionCount\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionCount\",\n          address: req.address,\n          tag: req.blockTag\n        });\n      case \"getCode\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getCode\",\n          address: req.address,\n          tag: req.blockTag\n        });\n      case \"getStorage\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getStorageAt\",\n          address: req.address,\n          position: req.position,\n          tag: req.blockTag\n        });\n      case \"broadcastTransaction\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_sendRawTransaction\",\n          hex: req.signedTransaction\n        }, true).catch(error => {\n          return this._checkError(req, error, req.signedTransaction);\n        });\n      case \"getBlock\":\n        if (\"blockTag\" in req) {\n          return this.fetch(\"proxy\", {\n            action: \"eth_getBlockByNumber\",\n            tag: req.blockTag,\n            boolean: req.includeTransactions ? \"true\" : \"false\"\n          });\n        }\n        assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"getBlock(blockHash)\"\n        });\n      case \"getTransaction\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionByHash\",\n          txhash: req.hash\n        });\n      case \"getTransactionReceipt\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionReceipt\",\n          txhash: req.hash\n        });\n      case \"call\":\n        {\n          if (req.blockTag !== \"latest\") {\n            throw new Error(\"EtherscanProvider does not support blockTag for call\");\n          }\n          const postData = this._getTransactionPostData(req.transaction);\n          postData.module = \"proxy\";\n          postData.action = \"eth_call\";\n          try {\n            return await this.fetch(\"proxy\", postData, true);\n          } catch (error) {\n            return this._checkError(req, error, req.transaction);\n          }\n        }\n      case \"estimateGas\":\n        {\n          const postData = this._getTransactionPostData(req.transaction);\n          postData.module = \"proxy\";\n          postData.action = \"eth_estimateGas\";\n          try {\n            return await this.fetch(\"proxy\", postData, true);\n          } catch (error) {\n            return this._checkError(req, error, req.transaction);\n          }\n        }\n      /*\n                  case \"getLogs\": {\n                      // Needs to complain if more than one address is passed in\n                      const args: Record<string, any> = { action: \"getLogs\" }\n      \n                      if (params.filter.fromBlock) {\n                          args.fromBlock = checkLogTag(params.filter.fromBlock);\n                      }\n      \n                      if (params.filter.toBlock) {\n                          args.toBlock = checkLogTag(params.filter.toBlock);\n                      }\n      \n                      if (params.filter.address) {\n                          args.address = params.filter.address;\n                      }\n      \n                      // @TODO: We can handle slightly more complicated logs using the logs API\n                      if (params.filter.topics && params.filter.topics.length > 0) {\n                          if (params.filter.topics.length > 1) {\n                              logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                          }\n                          if (params.filter.topics.length === 1) {\n                              const topic0 = params.filter.topics[0];\n                              if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                                  logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                              }\n                              args.topic0 = topic0;\n                          }\n                      }\n      \n                      const logs: Array<any> = await this.fetch(\"logs\", args);\n      \n                      // Cache txHash => blockHash\n                      let blocks: { [tag: string]: string } = {};\n      \n                      // Add any missing blockHash to the logs\n                      for (let i = 0; i < logs.length; i++) {\n                          const log = logs[i];\n                          if (log.blockHash != null) { continue; }\n                          if (blocks[log.blockNumber] == null) {\n                              const block = await this.getBlock(log.blockNumber);\n                              if (block) {\n                                  blocks[log.blockNumber] = block.hash;\n                              }\n                          }\n      \n                          log.blockHash = blocks[log.blockNumber];\n                      }\n      \n                      return logs;\n                  }\n      */\n      default:\n        break;\n    }\n    return super._perform(req);\n  }\n  async getNetwork() {\n    return this.network;\n  }\n  /**\n   *  Resolves to the current price of ether.\n   *\n   *  This returns ``0`` on any network other than ``mainnet``.\n   */\n  async getEtherPrice() {\n    if (this.network.name !== \"mainnet\") {\n      return 0.0;\n    }\n    return parseFloat((await this.fetch(\"stats\", {\n      action: \"ethprice\"\n    })).ethusd);\n  }\n  /**\n   *  Resolves to a [Contract]] for %%address%%, using the\n   *  Etherscan API to retreive the Contract ABI.\n   */\n  async getContract(_address) {\n    let address = this._getAddress(_address);\n    if (isPromise(address)) {\n      address = await address;\n    }\n    try {\n      const resp = await this.fetch(\"contract\", {\n        action: \"getabi\",\n        address\n      });\n      const abi = JSON.parse(resp);\n      return new Contract(address, abi, this);\n    } catch (error) {\n      return null;\n    }\n  }\n  isCommunityResource() {\n    return this.apiKey == null;\n  }\n}\n//# sourceMappingURL=provider-etherscan.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}