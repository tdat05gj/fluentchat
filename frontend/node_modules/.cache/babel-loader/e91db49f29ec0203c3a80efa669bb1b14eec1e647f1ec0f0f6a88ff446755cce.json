{"ast":null,"code":"/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CTR } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, getBytes, hexlify, uuidV4, assert, assertArgument } from \"../utils/index.js\";\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\nimport { version } from \"../_version.js\";\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nexport function isKeystoreJson(json) {\n  try {\n    const data = JSON.parse(json);\n    const version = data.version != null ? parseInt(data.version) : 0;\n    if (version === 3) {\n      return true;\n    }\n  } catch (error) {}\n  return false;\n}\nfunction decrypt(data, key, ciphertext) {\n  const cipher = spelunk(data, \"crypto.cipher:string\");\n  if (cipher === \"aes-128-ctr\") {\n    const iv = spelunk(data, \"crypto.cipherparams.iv:data!\");\n    const aesCtr = new CTR(key, iv);\n    return hexlify(aesCtr.decrypt(ciphertext));\n  }\n  assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"decrypt\"\n  });\n}\nfunction getAccount(data, _key) {\n  const key = getBytes(_key);\n  const ciphertext = spelunk(data, \"crypto.ciphertext:data!\");\n  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n  assertArgument(computedMAC === spelunk(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n  const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n  const address = computeAddress(privateKey);\n  if (data.address) {\n    let check = data.address.toLowerCase();\n    if (!check.startsWith(\"0x\")) {\n      check = \"0x\" + check;\n    }\n    assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n  }\n  const account = {\n    address,\n    privateKey\n  };\n  // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n  const version = spelunk(data, \"x-ethers.version:string\");\n  if (version === \"0.1\") {\n    const mnemonicKey = key.slice(32, 64);\n    const mnemonicCiphertext = spelunk(data, \"x-ethers.mnemonicCiphertext:data!\");\n    const mnemonicIv = spelunk(data, \"x-ethers.mnemonicCounter:data!\");\n    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n    account.mnemonic = {\n      path: spelunk(data, \"x-ethers.path:string\") || defaultPath,\n      locale: spelunk(data, \"x-ethers.locale:string\") || \"en\",\n      entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n    };\n  }\n  return account;\n}\nfunction getDecryptKdfParams(data) {\n  const kdf = spelunk(data, \"crypto.kdf:string\");\n  if (kdf && typeof kdf === \"string\") {\n    if (kdf.toLowerCase() === \"scrypt\") {\n      const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n      const N = spelunk(data, \"crypto.kdfparams.n:int!\");\n      const r = spelunk(data, \"crypto.kdfparams.r:int!\");\n      const p = spelunk(data, \"crypto.kdfparams.p:int!\");\n      // Make sure N is a power of 2\n      assertArgument(N > 0 && (N & N - 1) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n      assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n      const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n      assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n      return {\n        name: \"scrypt\",\n        salt,\n        N,\n        r,\n        p,\n        dkLen: 64\n      };\n    } else if (kdf.toLowerCase() === \"pbkdf2\") {\n      const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n      const prf = spelunk(data, \"crypto.kdfparams.prf:string!\");\n      const algorithm = prf.split(\"-\").pop();\n      assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n      const count = spelunk(data, \"crypto.kdfparams.c:int!\");\n      const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n      assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n      return {\n        name: \"pbkdf2\",\n        salt,\n        count,\n        dkLen,\n        algorithm\n      };\n    }\n  }\n  assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nexport function decryptKeystoreJsonSync(json, _password) {\n  const data = JSON.parse(json);\n  const password = getPassword(_password);\n  const params = getDecryptKdfParams(data);\n  if (params.name === \"pbkdf2\") {\n    const {\n      salt,\n      count,\n      dkLen,\n      algorithm\n    } = params;\n    const key = pbkdf2(password, salt, count, dkLen, algorithm);\n    return getAccount(data, key);\n  }\n  assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n    params\n  });\n  const {\n    salt,\n    N,\n    r,\n    p,\n    dkLen\n  } = params;\n  const key = scryptSync(password, salt, N, r, p, dkLen);\n  return getAccount(data, key);\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nexport async function decryptKeystoreJson(json, _password, progress) {\n  const data = JSON.parse(json);\n  const password = getPassword(_password);\n  const params = getDecryptKdfParams(data);\n  if (params.name === \"pbkdf2\") {\n    if (progress) {\n      progress(0);\n      await stall(0);\n    }\n    const {\n      salt,\n      count,\n      dkLen,\n      algorithm\n    } = params;\n    const key = pbkdf2(password, salt, count, dkLen, algorithm);\n    if (progress) {\n      progress(1);\n      await stall(0);\n    }\n    return getAccount(data, key);\n  }\n  assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n    params\n  });\n  const {\n    salt,\n    N,\n    r,\n    p,\n    dkLen\n  } = params;\n  const key = await scrypt(password, salt, N, r, p, dkLen, progress);\n  return getAccount(data, key);\n}\nfunction getEncryptKdfParams(options) {\n  // Check/generate the salt\n  const salt = options.salt != null ? getBytes(options.salt, \"options.salt\") : randomBytes(32);\n  // Override the scrypt password-based key derivation function parameters\n  let N = 1 << 17,\n    r = 8,\n    p = 1;\n  if (options.scrypt) {\n    if (options.scrypt.N) {\n      N = options.scrypt.N;\n    }\n    if (options.scrypt.r) {\n      r = options.scrypt.r;\n    }\n    if (options.scrypt.p) {\n      p = options.scrypt.p;\n    }\n  }\n  assertArgument(typeof N === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n  assertArgument(typeof r === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n  assertArgument(typeof p === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n  return {\n    name: \"scrypt\",\n    dkLen: 32,\n    salt,\n    N,\n    r,\n    p\n  };\n}\nfunction _encryptKeystore(key, kdf, account, options) {\n  const privateKey = getBytes(account.privateKey, \"privateKey\");\n  // Override initialization vector\n  const iv = options.iv != null ? getBytes(options.iv, \"options.iv\") : randomBytes(16);\n  assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n  // Override the uuid\n  const uuidRandom = options.uuid != null ? getBytes(options.uuid, \"options.uuid\") : randomBytes(16);\n  assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n  // This will be used to encrypt the wallet (as per Web3 secret storage)\n  // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n  // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n  const derivedKey = key.slice(0, 16);\n  const macPrefix = key.slice(16, 32);\n  // Encrypt the private key\n  const aesCtr = new CTR(derivedKey, iv);\n  const ciphertext = getBytes(aesCtr.encrypt(privateKey));\n  // Compute the message authentication code, used to check the password\n  const mac = keccak256(concat([macPrefix, ciphertext]));\n  // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n  const data = {\n    address: account.address.substring(2).toLowerCase(),\n    id: uuidV4(uuidRandom),\n    version: 3,\n    Crypto: {\n      cipher: \"aes-128-ctr\",\n      cipherparams: {\n        iv: hexlify(iv).substring(2)\n      },\n      ciphertext: hexlify(ciphertext).substring(2),\n      kdf: \"scrypt\",\n      kdfparams: {\n        salt: hexlify(kdf.salt).substring(2),\n        n: kdf.N,\n        dklen: 32,\n        p: kdf.p,\n        r: kdf.r\n      },\n      mac: mac.substring(2)\n    }\n  };\n  // If we have a mnemonic, encrypt it into the JSON wallet\n  if (account.mnemonic) {\n    const client = options.client != null ? options.client : \"ethers/\".concat(version);\n    const path = account.mnemonic.path || defaultPath;\n    const locale = account.mnemonic.locale || \"en\";\n    const mnemonicKey = key.slice(32, 64);\n    const entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n    const mnemonicIv = randomBytes(16);\n    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n    const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n    const now = new Date();\n    const timestamp = now.getUTCFullYear() + \"-\" + zpad(now.getUTCMonth() + 1, 2) + \"-\" + zpad(now.getUTCDate(), 2) + \"T\" + zpad(now.getUTCHours(), 2) + \"-\" + zpad(now.getUTCMinutes(), 2) + \"-\" + zpad(now.getUTCSeconds(), 2) + \".0Z\";\n    const gethFilename = \"UTC--\" + timestamp + \"--\" + data.address;\n    data[\"x-ethers\"] = {\n      client,\n      gethFilename,\n      path,\n      locale,\n      mnemonicCounter: hexlify(mnemonicIv).substring(2),\n      mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n      version: \"0.1\"\n    };\n  }\n  return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nexport function encryptKeystoreJsonSync(account, password, options) {\n  if (options == null) {\n    options = {};\n  }\n  const passwordBytes = getPassword(password);\n  const kdf = getEncryptKdfParams(options);\n  const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n  return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nexport async function encryptKeystoreJson(account, password, options) {\n  if (options == null) {\n    options = {};\n  }\n  const passwordBytes = getPassword(password);\n  const kdf = getEncryptKdfParams(options);\n  const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n  return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n//# sourceMappingURL=json-keystore.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}